{
  "hash": "a8f9bc5e7693291283087692c6c1fea5",
  "result": {
    "engine": "jupyter",
    "markdown": "# Decision Trees\n\n\n<!-- ## Naive ideas -->\n\nGiven a dataset with labels, the decision tree algorithm firstly trys to split the whole dataset into two different groups, based on some speicific features. Choose which feature to use and set the threshold for the split are done.\n\n\n\n## Gini impurity\n\nTo split a dataset, we need a metric to tell whether the split is good or not. The two most popular metrics that are used are Gini impurity and Entropy. The two metrics don't have essential differences, that the results obtained by applying each metric are very similar to each other. Therefore we will only focus on Gini impurity since it is slightly easier to compute and slightly easier to explain.\n\n### Motivation and Definition\nAssume that we have a dataset of totally $n$ objects, and these objects are divided into $k$ classes. The $i$-th class has $n_i$ objects. Then if we randomly pick an object, the probability to get an object belonging to the $i$-th class is\n\n$$\np_i=\\frac{n_i}{n}\n$$\n\nIf we then guess the class of the object purely based on the distribution of each class, the probability that our guess is incorrect is \n\n$$\n1-p_i = 1-\\frac{n_i}{n}.\n$$\n\nTherefore, if we randomly pick an object that belongs to the $i$-th class and randomly guess its class purely based on the distribution but our guess is wrong, the probability that such a thing happens is \n\n$$\np_i(1-p_i).\n$$\n\nConsider all classes. The probability at which any object of the dataset will be mislabelled when it is randomly labeled is the sum of the probability described above:\n\n$$\n\\sum_{i=1}^kp_i(1-p_i)=\\sum_{i=1}^kp_i-\\sum_{i=1}^kp_i^2=1-\\sum_{i=1}^kp_i^2.\n$$\n\nThis is the definition formula for the *Gini impurity*. \n\n\n\n::: {#def-gini}\nThe **Gini impurity** is calculated using the following formula\n\n$$\nGini = \\sum_{i=1}^kp_i(1-p_i)=\\sum_{i=1}^kp_i-\\sum_{i=1}^kp_i^2=1-\\sum_{i=1}^kp_i^2,\n$$\nwhere $p_i$ is the probability of class $i$.\n:::\n\nThe way to understand Gini impurity is to consider some extreme examples. \n\n\n::: {#exm-}\n\nAssume that we only have one class. Therefore $k=1$, and $p_1=1$. Then the Gini impurity is\n\n$$\nGini = 1-1^2=0.\n$$\nThis is the minimum possible Gini impurity. It means that the dataset is **pure**: all the objects contained are of one unique class. In this case, we won't make any mistakes if we randomly guess the label.\n\n:::\n\n\n\n\n::: {#exm-}\nAssume that we have two classes. Therefore $k=2$. Consider the distribution $p_1$ and $p_2$. We know that $p_1+p_2=1$. Therefore $p_2=1-p_1$. Then the Gini impurity is\n\n$$\nGini(p_1) = 1-p_1^2-p_2^2=1-p_1^2-(1-p_1)^2=2p_1-2p_1^2.\n$$\nWhen $0\\leq p_1\\leq 1$, this function $Gini(p_1)$ is between $0$ and $0.5$. \n- It gets $0$ when $p_1=0$ or $1$. In these two cases, the dataset is still a one-class set since the size of one class is $0$. \n- It gets $0.5$ when $p_1=0.5$. This means that the Gini impurity is maximized when the size of different classes are balanced.\n:::\n\n### Algorithm\n\n\n::: {.callout-note}\n# Algorithm: Gini impurity\n\n**Inputs** A dataset $S=\\{data=[features, label]\\}$ with labels. \n\n**Outputs** The Gini impurity of the dataset.\n\n1. Get the size $n$ of the dataset.\n2. Go through the label list, and find all unique labels: $uniqueLabelList$.\n3. Go through each label $l$ in $uniqueLabelList$ and count how many elements belonging to the label, and record them as $n_l$.\n4. Use the formula to compute the Gini impurity:\n\n   $$\n    Gini = 1-\\sum_{l\\in uniqueLabelList}\\left(\\frac{n_l}{n}\\right)^2.\n   $$\n:::\n\n\nThe sample codes are listed below:\n\n::: {#92e5c855 .cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\ndef gini(S):\n    N = len(S)\n    y = S[:, -1].reshape(N)\n    gini = 1 - ((pd.Series(y).value_counts()/N)**2).sum()\n    return gini\n```\n:::\n\n\n## CART Algorithms \n\n### Ideas\nConsider a labeled dataset $S$ with totally $m$ elements. We use a feature $k$ and a threshold $t_k$ to split it into two subsets: $S_l$ with $m_l$ elements and $S_r$ with $m_r$ elements. Then the cost function of this split is\n\n$$\nJ(k, t_k)=\\frac{m_l}mGini(S_l)+\\frac{m_r}{m}Gini(S_r).\n$$\nIt is not hard to see that the more pure the two subsets are the lower the cost function is. Therefore our goal is find a split that can minimize the cost function.\n\n:::{.callout-note}\n\n# Algorithm: Split the Dataset\n\n**Inputs** Given a labeled dataset $S=\\{[features, label]\\}$.\n\n**Outputs** A best split $(k, t_k)$.\n\n1. For each feature $k$:\n    1. For each value $t$ of the feature:\n        1. Split the dataset $S$ into two subsets, one with $k\\leq t$ and one with $k>t$.\n        2. Compute the cost function $J(k,t)$. \n        3. Compare it with the current smallest cost. If this split has smaller cost, replace the current smallest cost and pair with $(k, t)$.\n2. Return the pair $(k,t_k)$ that has the smallest cost function.\n:::\n\n\nWe then use this split algorithm recursively to get the decision tree.\n\n:::{.callout-note}\n# Classification and Regression Tree, CART\n\n**Inputs** Given a labeled dataset $S=\\{[features, label]\\}$ and a maximal depth `max_depth`.\n\n**Outputs** A decision tree.\n\n1. Starting from the original dataset $S$. Set the working dataset $G=S$.\n2. Consider a dataset $G$. If $Gini(G)\\neq0$, split $G$ into $G_l$ and $G_r$ to minimize the cost function. Record the split pair $(k, t_k)$.\n3. Now set the working dataset $G=G_l$ and $G=G_r$ respectively, and apply the above two steps to each of them.\n4. Repeat the above steps, until `max_depth` is reached.\n:::\n\nHere are the sample codes.\n\n::: {#bb171667 .cell execution_count=2}\n``` {.python .cell-code}\ndef split(G):\n    m = G.shape[0]\n    gmini = gini(G)\n    pair = None\n    if gini(G) != 0:\n        numOffeatures = G.shape[1] - 1\n        for k in range(numOffeatures):\n            for t in range(m):\n                Gl = G[G[:, k] <= G[t, k]]\n                Gr = G[G[:, k] > G[t, k]]\n                gl = gini(Gl)\n                gr = gini(Gr)\n                ml = Gl.shape[0]\n                mr = Gr.shape[0]\n                g = gl*ml/m + gr*mr/m\n                if g < gmini:\n                    gmini = g\n                    pair = (k, G[t, k])\n                    Glm = Gl\n                    Grm = Gr\n        res = {'split': True,\n               'pair': pair,\n               'sets': (Glm, Grm)}\n    else:\n        res = {'split': False,\n               'pair': pair,\n               'sets': G}\n    return res\n```\n:::\n\n\nFor the purpose of counting labels, we also write a code to do so.\n\n::: {#3a598663 .cell execution_count=3}\n``` {.python .cell-code}\nimport pandas as pd\ndef countlabels(S):\n    y = S[:, -1].reshape(S.shape[0])\n    labelCount = dict(pd.Series(y).value_counts())\n    return labelCount\n```\n:::\n\n\n## Decision Tree Project 1: the `iris` dataset\n\nWe are going to use the Decision Tree model to study the `iris` dataset. This dataset has already studied previously using k-NN. Again we will only use the first two features for visualization purpose.\n\n### Initial setup\n\nSince the dataset will be splitted, we will put `X` and `y` together as a single variable `S`. In this case when we split the dataset by selecting rows, the features and the labels are still paired correctly. \n\nWe also print the labels and the feature names for our convenience.\n\n::: {#46c55ce5 .cell execution_count=4}\n``` {.python .cell-code}\nfrom sklearn.datasets import load_iris\nimport numpy as np\nfrom assests.codes.dt import gini, split, countlabels\n\niris = load_iris()\nX = iris.data[:, 2:]\ny = iris.target\ny = y.reshape((y.shape[0],1))\nS = np.concatenate([X,y], axis=1)\n\nprint(iris.target_names)\nprint(iris.feature_names)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['setosa' 'versicolor' 'virginica']\n['sepal length (cm)', 'sepal width (cm)', 'petal length (cm)', 'petal width (cm)']\n```\n:::\n:::\n\n\n### Apply CART manually\n\nWe apply `split` to the dataset `S`. \n\n::: {#66796238 .cell execution_count=5}\n``` {.python .cell-code}\nr = split(S)\nif r['split'] is True:\n    Gl, Gr = r['sets']\n    print(r['pair'])\n    print('The left subset\\'s Gini impurity is {g:.2f},'.format(g=gini(Gl)),\n          ' and its label counts is {d:}'.format(d=countlabels(Gl)))\n    print('The right subset\\'s Gini impurity is {g:.2f},'.format(g=gini(Gr)),\n          ' and its label counts is {d}'.format(d=countlabels(Gr)))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(0, 1.9)\nThe left subset's Gini impurity is 0.00,  and its label counts is {0.0: 50}\nThe right subset's Gini impurity is 0.50,  and its label counts is {1.0: 50, 2.0: 50}\n```\n:::\n:::\n\n\nThe results shows that `S` is splitted into two subsets based on the `0`-th feature and the split value is `1.9`. \n\nThe left subset is already pure since its Gini impurity is `0`. All elements in the left subset is label `0` (which is `setosa`). The right one is mixed since its Gini impurity is `0.5`. Therefore we need to apply `split` again to the right subset.\n\n::: {#e4154dd1 .cell execution_count=6}\n``` {.python .cell-code}\nr = split(Gr)\nif r['split'] is True:\n    Grl, Grr = r['sets']\n    print(r['pair'])\n    print('The left subset\\'s Gini impurity is {g:.2f},'.format(g=gini(Grl)),\n          ' and its label counts is {d:}'.format(d=countlabels(Grl)))\n    print('The right subset\\'s Gini impurity is {g:.2f},'.format(g=gini(Grr)),\n          ' and its label counts is {d}'.format(d=countlabels(Grr)))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(1, 1.7)\nThe left subset's Gini impurity is 0.17,  and its label counts is {1.0: 49, 2.0: 5}\nThe right subset's Gini impurity is 0.04,  and its label counts is {2.0: 45, 1.0: 1}\n```\n:::\n:::\n\n\nThis time the subset is splitted into two more subsets based on the `1`-st feature and the split value is `1.7`. The total Gini impurity is minimized using this split. \n\nThe decision we created so far can be described as follows:\n\n1. Check the first feature `sepal length (cm)` to see whether it is smaller or equal to `1.9`.\n   1. If it is, classify it as lable `0` which is `setosa`.\n   2. If not, continue to the next stage.\n2. Check the second feature `sepal width (cm)` to see whether it is smaller or equal to `1.7`. \n   1. If it is, classify it as label `1` which is `versicolor`.\n   2. If not, classify it as label `2` which is `virginica`.\n\n### Use package `sklearn`\n\nNow we would like to use the decision tree package provided by `sklearn`. The process is straightforward. The parameter `random_state=40` will be discussed {ref}`later<note-random_state>`, and it is not necessary in most cases.\n\n::: {#9a6b9d75 .cell execution_count=7}\n``` {.python .cell-code}\nfrom sklearn import tree\nclf = tree.DecisionTreeClassifier(max_depth=2, random_state=40)\nclf.fit(X, y)\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```{=html}\n<style>#sk-container-id-1 {color: black;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>DecisionTreeClassifier(max_depth=2, random_state=40)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">DecisionTreeClassifier</label><div class=\"sk-toggleable__content\"><pre>DecisionTreeClassifier(max_depth=2, random_state=40)</pre></div></div></div></div></div>\n```\n:::\n:::\n\n\n`sklearn` provide a way to automatically generate the tree view of the decision tree. The code is as follows. \n\n::: {#c1fc1db4 .cell execution_count=8}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\nplt.figure(figsize=(2, 2), dpi=200)\ntree.plot_tree(clf, filled=True, impurity=True)\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\n[Text(0.4, 0.8333333333333334, 'x[1] <= 0.8\\ngini = 0.667\\nsamples = 150\\nvalue = [50, 50, 50]'),\n Text(0.2, 0.5, 'gini = 0.0\\nsamples = 50\\nvalue = [50, 0, 0]'),\n Text(0.6, 0.5, 'x[1] <= 1.75\\ngini = 0.5\\nsamples = 100\\nvalue = [0, 50, 50]'),\n Text(0.4, 0.16666666666666666, 'gini = 0.168\\nsamples = 54\\nvalue = [0, 49, 5]'),\n Text(0.8, 0.16666666666666666, 'gini = 0.043\\nsamples = 46\\nvalue = [0, 1, 45]')]\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](intro_files/figure-html/cell-9-output-2.png){}\n:::\n:::\n\n\nSimilar to k-NN, we may use `sklearn.inspection.DecisionBoundaryDisplay` to visualize the decision boundary of this decision tree.\n\n::: {#33608e55 .cell execution_count=9}\n``` {.python .cell-code}\nfrom sklearn.inspection import DecisionBoundaryDisplay\nDecisionBoundaryDisplay.from_estimator(\n    clf,\n    X,\n    cmap='coolwarm',\n    response_method=\"predict\",\n    xlabel=iris.feature_names[0],\n    ylabel=iris.feature_names[1],\n)\n\n# Plot the training points\nplt.scatter(X[:, 0], X[:, 1], c=y, s=15)\n```\n\n::: {.cell-output .cell-output-display}\n![](intro_files/figure-html/cell-10-output-1.png){width=600 height=434}\n:::\n:::\n\n\n### Analyze the differences between the two methods\nThe tree generated by `sklearn` and the tree we got manually is a little bit different. Let us explore the differences here. \n\nTo make it easier to split the set, we could convert the `numpy.ndarray` to `pandas.DataFrame`.\n\n::: {#051fec90 .cell execution_count=10}\n``` {.python .cell-code}\nimport pandas as pd\n\ndf = pd.DataFrame(X)\ndf.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>0</th>\n      <th>1</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1.4</td>\n      <td>0.2</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1.4</td>\n      <td>0.2</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1.3</td>\n      <td>0.2</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1.5</td>\n      <td>0.2</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1.4</td>\n      <td>0.2</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nNow based on our tree, we would like to get all data points that the first feature (which is marked as `0`) is smaller or equal to `1.9`. We save it as `df1`. Similarly based on the tree gotten from `sklearn`, we would like to get all data points taht the second feature (which is marked as `1`) is smaller or equal to `0.8` and save it to `df2`. \n\n::: {#67715393 .cell execution_count=11}\n``` {.python .cell-code}\ndf1 = df[df[0]<=1.9]\ndf2 = df[df[1]<=0.8]\n```\n:::\n\n\nThen we would like to compare these two dataframes. What we want is to see whether they are the same regardless the order. One way to do this is to sort the two dataframes and then compare them directly.\n\nTo sort the dataframe we use the method `DataFrame.sort_values`. The details can be found [here](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.sort_values.html). Note that after `sort_values` we apply `reset_index` to reset the index just in case the index is massed by the sort operation.\n\nThen we use `DataFrame.equals` to check whether they are the same.\n\n::: {#979144dd .cell execution_count=12}\n``` {.python .cell-code}\ndf1sorted = df1.sort_values(by=df1.columns.tolist()).reset_index(drop=True)\ndf2sorted = df2.sort_values(by=df2.columns.tolist()).reset_index(drop=True)\nprint(df1sorted.equals(df2sorted))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTrue\n```\n:::\n:::\n\n\nSo these two sets are really the same. The reason this happens can be seen from the following two graphs.\n\n\n:::{layout-ncol=2}\n\n\n![From our code](assests/img/20220809120531.png)\n\n![From `sklearn`](assests/img/20220809122643.png)\n\n:::\n\n\n\nSo you can see that either way can give us the same classification. This means that given one dataset the construction of the decision tree might be random at some points.\n\n\n::: {.callout-note}\n# note-random_state\nSince the split is random, when using `sklearn.DecisionTreeClassifier` to construct decision trees, sometimes we might get the same tree as what we get from our naive codes. \n\nTo illustrate this phenomenaon I need to set the random state in case it will generate the same tree as ours when I need it to generate a different tree. The parameter `random_state=40` mentioned before is for this purpose.\n:::\n\n\n\nAnother difference is the split value of the second branch. In our case it is `1.7` and in `sklearn` case it is `1.75`. So after we get the right subset from the first split (which is called `dfr`), we would split it into two sets based on whether the second feature is above or below `1.7`.\n\n::: {#b1e638be .cell execution_count=13}\n``` {.python .cell-code}\ndfr = df[df[0]>1.9]\ndf2a = dfr[dfr[1]>1.7]\ndf2b = dfr[dfr[1]<=1.7]\nprint(df2b[1].max())\nprint(df2a[1].min())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1.7\n1.8\n```\n:::\n:::\n\n\nNow you can see where the split number comes from. In our code, when we found a split, we will directly use that number as the cut. In this case it is `1.7`. \n\nIn `sklearn`, when it finds a split, the algorithm will go for the middle of the gap as the cut. In this case it is `(1.7+1.8)/2=1.75`. \n\n## Decision Tree Project 2: `make_moons` dataset\n\n`sklearn` includes various random sample generators that can be used to build artificial datasets of controlled size and complexity. We are going to use `make_moons` in this section. More details can be found [here](https://scikit-learn.org/stable/datasets/sample_generators.html).\n\n`make_moons` generate 2d binary classification datasets that are challenging to certain algorithms (e.g. centroid-based clustering or linear classification), including optional Gaussian noise. `make_moons` produces two interleaving half circles. It is useful for visualization. \n\nLet us explorer the dataset first.\n\n::: {#d6289f9c .cell execution_count=14}\n``` {.python .cell-code}\nfrom sklearn.datasets import make_moons\nimport matplotlib.pyplot as plt\n\nX, y = make_moons(n_samples=10000, noise=0.4, random_state=42)\nplt.scatter(x=X[:, 0], y=X[:, 1], c=y)\n```\n\n::: {.cell-output .cell-output-display}\n![](intro_files/figure-html/cell-15-output-1.png){width=582 height=411}\n:::\n:::\n\n\nNow we are applying `sklearn.DecisionTreeClassifier` to construct the decision tree. The steps are as follows.\n\n1. Split the dataset into training data and test data. \n2. Construct the pipeline. Since we won't apply any transformers there for this problem, we may just use the classifier `sklearn.DecisionTreeClassifier` directly without really construct the pipeline object.\n3. Consider the hyperparameter space for grid search. For this problme we choose `min_samples_split` and `max_leaf_nodes` as the hyperparameters we need. We will let `min_samples_split` run through 2 to 5, and `max_leaf_nodes` run through 2 to 50. We will use `grid_search_cv` to find the best hyperparameter for our model. For cross-validation, the number of split is set to be `3` which means that we will run trainning 3 times for each pair of hyperparameters.\n4. Run `grid_search_cv`. Find the best hyperparameters and the best estimator. Test it on the test set to get the accuracy score.\n\n::: {#7f9ee1f9 .cell execution_count=15}\n``` {.python .cell-code}\n# Step 1\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n```\n:::\n\n\n::: {#54f010be .cell execution_count=16}\n``` {.python .cell-code}\n# Step 3\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.tree import DecisionTreeClassifier\nimport numpy as np\n\nparams = {'min_samples_split': list(range(2, 5)),\n          'max_leaf_nodes': list(range(2, 50))}\ngrid_search_cv = GridSearchCV(DecisionTreeClassifier(random_state=42), \n                              params, verbose=1, cv=3)\ngrid_search_cv.fit(X_train, y_train)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nFitting 3 folds for each of 144 candidates, totalling 432 fits\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=16}\n```{=html}\n<style>#sk-container-id-2 {color: black;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GridSearchCV(cv=3, estimator=DecisionTreeClassifier(random_state=42),\n             param_grid={&#x27;max_leaf_nodes&#x27;: [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,\n                                            13, 14, 15, 16, 17, 18, 19, 20, 21,\n                                            22, 23, 24, 25, 26, 27, 28, 29, 30,\n                                            31, ...],\n                         &#x27;min_samples_split&#x27;: [2, 3, 4]},\n             verbose=1)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" ><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">GridSearchCV</label><div class=\"sk-toggleable__content\"><pre>GridSearchCV(cv=3, estimator=DecisionTreeClassifier(random_state=42),\n             param_grid={&#x27;max_leaf_nodes&#x27;: [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,\n                                            13, 14, 15, 16, 17, 18, 19, 20, 21,\n                                            22, 23, 24, 25, 26, 27, 28, 29, 30,\n                                            31, ...],\n                         &#x27;min_samples_split&#x27;: [2, 3, 4]},\n             verbose=1)</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" ><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">estimator: DecisionTreeClassifier</label><div class=\"sk-toggleable__content\"><pre>DecisionTreeClassifier(random_state=42)</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-4\" type=\"checkbox\" ><label for=\"sk-estimator-id-4\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">DecisionTreeClassifier</label><div class=\"sk-toggleable__content\"><pre>DecisionTreeClassifier(random_state=42)</pre></div></div></div></div></div></div></div></div></div></div>\n```\n:::\n:::\n\n\n::: {#9709948e .cell execution_count=17}\n``` {.python .cell-code}\n# Step 4\nfrom sklearn.metrics import accuracy_score\n\nclf = grid_search_cv.best_estimator_\nprint(grid_search_cv.best_params_)\ny_pred = clf.predict(X_test)\naccuracy_score(y_pred, y_test)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{'max_leaf_nodes': 17, 'min_samples_split': 2}\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=17}\n```\n0.8695\n```\n:::\n:::\n\n\nNow you can see that for this `make_moons` dataset, the best decision tree should have at most `17` leaf nodes and the minimum number of samples required to be at a leaft node is `2`. The fitted decision tree can get 86.95% accuracy on the test set. \n\nNow we can plot the decision tree and the decision surface.\n\n::: {#bf23a035 .cell execution_count=18}\n``` {.python .cell-code}\nfrom sklearn import tree\nplt.figure(figsize=(15, 15), dpi=300)\ntree.plot_tree(clf, filled=True)\n```\n\n::: {.cell-output .cell-output-display execution_count=18}\n```\n[Text(0.5340909090909091, 0.9375, 'x[1] <= 0.296\\ngini = 0.5\\nsamples = 8000\\nvalue = [3987, 4013]'),\n Text(0.25, 0.8125, 'x[0] <= -0.476\\ngini = 0.367\\nsamples = 4275\\nvalue = [1036, 3239]'),\n Text(0.09090909090909091, 0.6875, 'x[0] <= -0.764\\ngini = 0.183\\nsamples = 472\\nvalue = [424, 48]'),\n Text(0.045454545454545456, 0.5625, 'gini = 0.035\\nsamples = 333\\nvalue = [327, 6]'),\n Text(0.13636363636363635, 0.5625, 'x[1] <= 0.047\\ngini = 0.422\\nsamples = 139\\nvalue = [97, 42]'),\n Text(0.09090909090909091, 0.4375, 'gini = 0.496\\nsamples = 70\\nvalue = [38, 32]'),\n Text(0.18181818181818182, 0.4375, 'gini = 0.248\\nsamples = 69\\nvalue = [59, 10]'),\n Text(0.4090909090909091, 0.6875, 'x[1] <= -0.062\\ngini = 0.27\\nsamples = 3803\\nvalue = [612, 3191]'),\n Text(0.3181818181818182, 0.5625, 'x[1] <= -0.371\\ngini = 0.147\\nsamples = 2426\\nvalue = [194, 2232]'),\n Text(0.2727272727272727, 0.4375, 'gini = 0.079\\nsamples = 1336\\nvalue = [55, 1281]'),\n Text(0.36363636363636365, 0.4375, 'gini = 0.223\\nsamples = 1090\\nvalue = [139, 951]'),\n Text(0.5, 0.5625, 'x[0] <= 1.508\\ngini = 0.423\\nsamples = 1377\\nvalue = [418, 959]'),\n Text(0.45454545454545453, 0.4375, 'x[0] <= 0.503\\ngini = 0.48\\nsamples = 1013\\nvalue = [404, 609]'),\n Text(0.36363636363636365, 0.3125, 'x[0] <= -0.162\\ngini = 0.417\\nsamples = 469\\nvalue = [139, 330]'),\n Text(0.3181818181818182, 0.1875, 'gini = 0.5\\nsamples = 120\\nvalue = [61, 59]'),\n Text(0.4090909090909091, 0.1875, 'gini = 0.347\\nsamples = 349\\nvalue = [78, 271]'),\n Text(0.5454545454545454, 0.3125, 'x[0] <= 1.1\\ngini = 0.5\\nsamples = 544\\nvalue = [265, 279]'),\n Text(0.5, 0.1875, 'x[1] <= 0.129\\ngini = 0.49\\nsamples = 339\\nvalue = [193, 146]'),\n Text(0.45454545454545453, 0.0625, 'gini = 0.498\\nsamples = 178\\nvalue = [84, 94]'),\n Text(0.5454545454545454, 0.0625, 'gini = 0.437\\nsamples = 161\\nvalue = [109, 52]'),\n Text(0.5909090909090909, 0.1875, 'gini = 0.456\\nsamples = 205\\nvalue = [72, 133]'),\n Text(0.5454545454545454, 0.4375, 'gini = 0.074\\nsamples = 364\\nvalue = [14, 350]'),\n Text(0.8181818181818182, 0.8125, 'x[0] <= 1.452\\ngini = 0.329\\nsamples = 3725\\nvalue = [2951, 774]'),\n Text(0.7272727272727273, 0.6875, 'x[1] <= 0.757\\ngini = 0.232\\nsamples = 3355\\nvalue = [2905, 450]'),\n Text(0.6818181818181818, 0.5625, 'x[0] <= -0.588\\ngini = 0.349\\nsamples = 1629\\nvalue = [1262, 367]'),\n Text(0.6363636363636364, 0.4375, 'gini = 0.07\\nsamples = 384\\nvalue = [370, 14]'),\n Text(0.7272727272727273, 0.4375, 'x[1] <= 0.439\\ngini = 0.406\\nsamples = 1245\\nvalue = [892, 353]'),\n Text(0.6818181818181818, 0.3125, 'gini = 0.477\\nsamples = 420\\nvalue = [255, 165]'),\n Text(0.7727272727272727, 0.3125, 'gini = 0.352\\nsamples = 825\\nvalue = [637, 188]'),\n Text(0.7727272727272727, 0.5625, 'gini = 0.092\\nsamples = 1726\\nvalue = [1643, 83]'),\n Text(0.9090909090909091, 0.6875, 'x[0] <= 1.782\\ngini = 0.218\\nsamples = 370\\nvalue = [46, 324]'),\n Text(0.8636363636363636, 0.5625, 'gini = 0.416\\nsamples = 132\\nvalue = [39, 93]'),\n Text(0.9545454545454546, 0.5625, 'gini = 0.057\\nsamples = 238\\nvalue = [7, 231]')]\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](intro_files/figure-html/cell-19-output-2.png){}\n:::\n:::\n\n\n::: {#8b0a039b .cell execution_count=19}\n``` {.python .cell-code}\nfrom sklearn.inspection import DecisionBoundaryDisplay\n\nDecisionBoundaryDisplay.from_estimator(\n    clf,\n    X,\n    cmap=plt.cm.RdYlBu,\n    response_method=\"predict\"\n)\nplt.scatter(\n    X[:, 0],\n    X[:, 1],\n    c=y,\n    cmap='gray',\n    edgecolor=\"black\",\n    s=15,\n    alpha=.15)\n```\n\n::: {.cell-output .cell-output-display}\n![](intro_files/figure-html/cell-20-output-1.png){width=569 height=411}\n:::\n:::\n\n\nSince it is not very clear what the boundary looks like, I will draw the decision surface individually below.\n\n::: {#ff60a395 .cell execution_count=20}\n``` {.python .cell-code}\nDecisionBoundaryDisplay.from_estimator(\n    clf,\n    X,\n    cmap=plt.cm.RdYlBu,\n    response_method=\"predict\"\n)\n```\n\n::: {.cell-output .cell-output-display}\n![](intro_files/figure-html/cell-21-output-1.png){width=569 height=411}\n:::\n:::\n\n\n## Exercises and Projects\n\n\n::: {#exr-}\nThe dataset and its scattering plot is given below.\n\n1. Please calculate the Gini impurity of the whole set by hand.\n2. Please apply CART to create the decision tree by hand. \n3. Please use the tree you created to classify the following points:\n    - $(0.4, 1.0)$\n    - $(0.6, 1.0)$\n    - $(0.6, 0)$\n\nThe following code is for ploting. You may also get the precise data points by reading the code. You don't need to write codes to solve the problem.\n\n::: {#14b5a3a7 .cell execution_count=21}\n\n::: {.cell-output .cell-output-display}\n![](intro_files/figure-html/cell-22-output-1.png){width=581 height=564}\n:::\n:::\n\n\n:::\n\n\n\n\n\n\n::: {#exr-}\nCHOOSE ONE: Please apply the Decision Tree to one of the following datasets. \n\n- dating dataset (in Chpater 2). \n- the `titanic` dataset.\n\nPlease answer the following questions.\n\n1. Please use grid search to find the good `max_leaf_nodes` and `max_depth`.\n2. Please record the accuracy (or cross-validation score) of your model and compare it with the models you learned before (kNN). \n3. Please find the two most important features and explane your reason.\n4. (Optional) Use the two most important features to draw the Decision Boundary if possible.\n:::\n\n",
    "supporting": [
      "intro_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}