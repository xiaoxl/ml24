{
  "hash": "d21a6a1147e65008ef66ddc0cdf6d602",
  "result": {
    "engine": "jupyter",
    "markdown": "# Intro to Pytorch\n\n\nMost materials are based on @Godoy2022.\n\n\n\n## Linear regression (math) {#sec-linearregression_math}\n\n\n\n\n::: {.hidden}\n<!-- Constants and basic symbols -->\n\n$$\n\\require{physics}\n\\require{braket}\n$$\n\n$$\n\\newcommand{\\dl}[1]{{\\hspace{#1mu}\\mathrm d}}\n\\newcommand{\\me}{{\\mathrm e}}\n$$\n\n<!-- Probability -->\n\n$$\n \\newcommand{\\Exp}{\\operatorname{E}}\n \\newcommand{\\Var}{\\operatorname{Var}}\n \\newcommand{\\Mode}{\\operatorname{mode}}\n$$\n\n<!-- Distributions pdf -->\n\n$$\n \\newcommand{\\pdfbinom}{{\\tt binom}}\n \\newcommand{\\pdfbeta}{{\\tt beta}}\n \\newcommand{\\pdfpois}{{\\tt poisson}}\n \\newcommand{\\pdfgamma}{{\\tt gamma}}\n \\newcommand{\\pdfnormal}{{\\tt norm}}\n  \\newcommand{\\pdfexp}{{\\tt expon}}\n$$\n\n<!-- Distributions -->\n\n$$\n \\newcommand{\\distbinom}{\\operatorname{B}}\n \\newcommand{\\distbeta}{\\operatorname{Beta}}\n \\newcommand{\\distgamma}{\\operatorname{Gamma}}\n \\newcommand{\\distexp}{\\operatorname{Exp}}\n \\newcommand{\\distpois}{\\operatorname{Poisson}}\n \\newcommand{\\distnormal}{\\operatorname{\\mathcal N}}\n$$\n:::\n\n\n\n\nWe only consider the simplest case: simple linear regression (SLR). The idea is very simple. The dataset contains two variables (the independent variable $x$ and the response variable $y$.) The goal is to find the relation between $x$ and $y$ with the given dataset. We assume their relation is $y=b+wx$. How do we find $b$ and $w$?\n\nLet us first see an example. We would like to find the red line (which is the best fitted curve) shown below.\n\n::: {#894a33c5 .cell execution_count=1}\n\n::: {.cell-output .cell-output-display}\n![](intro_files/figure-html/cell-2-output-1.png){width=573 height=421}\n:::\n:::\n\n\n### Parameter space\n\nThe key here is to understand the idea of \"parameter space\". Since we already know that the function we are looking for has a formula $y=b+wx$, we could use the pair $(b, w)$ to denote different candidates of our answer. For example, the following plot show some possibilities in green dashed lines, while each possiblity is denoted by $(b, w)$. Then the problem is reworded as to find the best pair $(b, w)$.\n\n::: {#8d8bc55e .cell execution_count=2}\n\n::: {.cell-output .cell-output-display}\n![](intro_files/figure-html/cell-3-output-1.png){width=573 height=421}\n:::\n:::\n\n\n### Loss function\nThe \"best\" is defined in the following way. The dataset is given $\\{(x_i, y_i)\\}$. If we choose a pair of parameters $(b,w)$, we will have an estimated regression line, as well as a set of estimated $\\hat{y_i}$. The idea is to let the difference between $y_i$ and $\\hat{y_i}$ is as small as possible. In other words, a **loss function** $J$ is defined as follows:\n\n$$\nJ_{\\{(x_i,y_i)\\}}(b,w)=\\frac1N\\sum_{i=1}^N(y_i-\\hat{y_i})^2=\\frac1N\\sum_{i=1}^N(y_i-b-wx_i)^2\n$$ {#eq-cost_lr}\nand we are expected to find the $(b,w)$ such that the loss function is minimized. The contour map of $J$ is shown below. \n\n::: {#a5dd9fd5 .cell execution_count=3}\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\nText(0, 0.5, 'w')\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](intro_files/figure-html/cell-4-output-2.png){width=574 height=441}\n:::\n:::\n\n\n### Gradient Descent\n\nWe use a technique called \"gradient descent\" to find the global minimal of $J$. We start from a random point. For example $(1.0, 1.5)$. Then we find a direction where the cost $J$ reduces the most, and move in that direction. This direction is computed by the gradient of the cost $J$, and this is the reason why the algorithm is called \"gradient descent\". After we get to a new point, we evaluate the new gradient and move in the new direction. The process is repeated and we are expected to get close to the minimal point after several iterations. Just like shown in the following plot.\n\n::: {#c500a2b2 .cell execution_count=4}\n\n::: {.cell-output .cell-output-display}\n![](intro_files/figure-html/cell-5-output-1.png){width=574 height=441}\n:::\n:::\n\n\nThe parameter updating rule is shown below. The $\\eta$ is called the **learning rate**. It is a hyperparameter that is used to control the learning process. \n\n$$\n\\begin{aligned}\n&\\pdv{J}{b}=\\frac1N\\sum_{i=1}^N2(y_i-b-wx_i)(-1),\\quad &b_{new} = b_{old}-\\eta*\\pdv{J}{b},\\\\\n&\\pdv{J}{w}=\\frac1N\\sum_{i=1}^N2(y_i-b-wx_i)(-x_i),\\quad &w_{new} = w_{old}-\\eta*\\pdv{J}{w},\n\\end{aligned}\n$$ {#eq-gd_updating}\n\n::: {.callout-note collapse=\"true\"}\n# Learning rate $\\eta$\nGenerally speaking, larger $\\eta$ will move faster to the global minimal, but might be jumpy which cause it harder to converge. On the other side, smaller $\\eta$ moves in a more stable fashion, but may take a long time to converge. See the following examples.\n\n::: {#589f85c2 .cell execution_count=5}\n\n::: {.cell-output .cell-output-display}\n![](intro_files/figure-html/cell-6-output-1.png){width=577 height=436}\n:::\n:::\n\n\nIn the first example, $\\eta$ is too small, that after 200 iterations it is not very close to the minimal. In the second example, $\\eta$ becomes large. Although it gets to somewhere near the minimal, the path is very jumpy. It is able to converge only because the problem is indeed an easy one.\n:::\n\nWe may record the curve of the cost function.\n\n::: {#1bd4e8e8 .cell execution_count=6}\n\n::: {.cell-output .cell-output-stdout}\n```\nAfter 200 iterations, the parameters are (2.291241352364798, 1.203587494484257).\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](intro_files/figure-html/cell-7-output-2.png){width=593 height=436}\n:::\n:::\n\n\nThe cost is close to $0$ after 200 iterations and seems to be convergent. Therefore we believe that we are close to the minimal point. The point we get is (2.291241352364798, 1.203587494484257).\n\n\n\n\n\n### Summary\n\nLet us summarize the example above and generalize it to the general case. \n\n1. Let $\\{(X_i, y_i)\\}$ be a given dataset. Assume that $y=f_{\\Theta}(X)$ where $\\Theta$ is the set of all parameters. \n2. The cost function $J_{\\Theta, \\{(X_i, y_i)\\}}$ is defined. \n3. To find the minimal point of the cost function, the gradient descent is applied: \n   - Start from a random initial point $\\theta_0$.\n   - Compute the gradient $\\nabla J$ and update $\\theta_i=\\theta_{i-1}- \\eta \\nabla J$ and repeat the process multiple times.\n   - Draw the learning curve and determine when to stop. Then we get the estimated best parameters $\\hat{\\Theta}$.\n4. Our model under this setting is sovled. We then turn to evaluation phase.\n\n\n::: {.callout-note}\nThe above process can be further developped. We will discuss many of them in later sections.\n\n1. The cost function is related to each concerte problem.\n2. To compute the gradient of the cost function, chain rule is usually used. In the setting of MLP which we will discuss later, the gradient computations with chain rule are summarized as the so-called **Back propagation**. \n3. We go through the data points to compute the graident. How many points do we use? What is the frenqucy to update the gradient? This belongs to the topic of **mini-batch**.\n4. Even when we know that the graident gives the best direction, sometimes we don't really want to go in that direction, but make some modifications for some reason. To modify the direction, as well as choosing the learning rate $\\eta$, is the subject of **optimizers**.\n:::\n\n\n## Linear regression (`numpy`)\n\n\n\n\n::: {.hidden}\n<!-- Constants and basic symbols -->\n\n$$\n\\require{physics}\n\\require{braket}\n$$\n\n$$\n\\newcommand{\\dl}[1]{{\\hspace{#1mu}\\mathrm d}}\n\\newcommand{\\me}{{\\mathrm e}}\n$$\n\n<!-- Probability -->\n\n$$\n \\newcommand{\\Exp}{\\operatorname{E}}\n \\newcommand{\\Var}{\\operatorname{Var}}\n \\newcommand{\\Mode}{\\operatorname{mode}}\n$$\n\n<!-- Distributions pdf -->\n\n$$\n \\newcommand{\\pdfbinom}{{\\tt binom}}\n \\newcommand{\\pdfbeta}{{\\tt beta}}\n \\newcommand{\\pdfpois}{{\\tt poisson}}\n \\newcommand{\\pdfgamma}{{\\tt gamma}}\n \\newcommand{\\pdfnormal}{{\\tt norm}}\n  \\newcommand{\\pdfexp}{{\\tt expon}}\n$$\n\n<!-- Distributions -->\n\n$$\n \\newcommand{\\distbinom}{\\operatorname{B}}\n \\newcommand{\\distbeta}{\\operatorname{Beta}}\n \\newcommand{\\distgamma}{\\operatorname{Gamma}}\n \\newcommand{\\distexp}{\\operatorname{Exp}}\n \\newcommand{\\distpois}{\\operatorname{Poisson}}\n \\newcommand{\\distnormal}{\\operatorname{\\mathcal N}}\n$$\n:::\n\n\n\n\nWe will translate everything from the previous sections into codes.\n\n### Prepare the dataset\nWe first randomly generate a dataset `(X, y)` for the linear regression problem. \n\n::: {#db47ba76 .cell execution_count=7}\n``` {.python .cell-code}\nimport numpy as np\n\nRANDOMSEED = 42\nnp.random.seed(RANDOMSEED)\nX = np.random.rand(100)\ny = 2.3 + 1.2 * X + np.random.randn(100) * 0.1\n```\n:::\n\n\nWe set the seed to be 42 for reproducing the results. We will also split the dataset into training and test sets.\n\n::: {#38ec267d .cell execution_count=8}\n``` {.python .cell-code}\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=.15,\n                                                    random_state=RANDOMSEED)\n```\n:::\n\n\nWe will only focus only on the training set in this Chapter. \n\n\n### Compute gradient\nRecall @eq-cost_lr and @eq-gd_updating\n\n$$\n\\begin{aligned}\nJ(b,w)&=\\frac1N\\sum_{i=1}^N(y_i-b-wx_i)^2,\\\\\n\\pdv{J}{b}&=\\frac1N\\sum_{i=1}^N2(y_i-b-wx_i)(-1),\\\\\n\\pdv{J}{w}&=\\frac1N\\sum_{i=1}^N2(y_i-b-wx_i)(-x_i).\n\\end{aligned}\n$$\n\n::: {#7768d646 .cell execution_count=9}\n``` {.python .cell-code}\ndef J(parameters, X, y):    \n    b = parameters[0]\n    w = parameters[1]\n    return ((y-b-w*X)**2).mean().item()\n\ndef dJ(parameters, X, y):\n    b = parameters[0]\n    w = parameters[1]\n    db = (2*(y-b-w*X)*(-1)).mean()\n    dw = (2*(y-b-w*X)*(-X)).mean()\n    return np.array([db, dw])\n```\n:::\n\n\n### Gradient descent {#sec-gradeientdescent_numpy_example}\n\nIn general we need to random select a starting point. Here for the purpose of comparing to what we get from previous section, we will use a manual selected starting point $(1, 1.5)$. We then follow the path and move for a few steps. Here we will use $\\eta=0.2$ as the learning rate. \n\n::: {#09416d97 .cell execution_count=10}\n``` {.python .cell-code}\np = np.array([1.0, 1.5])\nlr = 0.2\n\nplist = []\nJlist = []\ndJlist = []\nfor _ in range(10):\n    J_i = J(p, X_train, y_train)\n    dJ_i = dJ(p, X_train, y_train)\n    p = p - lr * dJ_i\n    plist.append(p)\n    Jlist.append(J_i)\n    dJlist.append(dJ_i)\n\nplist = np.array(plist)\nJlist = np.array(Jlist)\ndJlist = np.array(dJlist)\nplist\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```\narray([[1.46212898, 1.70260448],\n       [1.70179135, 1.79494492],\n       [1.8284451 , 1.8316393 ],\n       [1.89762476, 1.84038829],\n       [1.93750825, 1.83523704],\n       [1.96239471, 1.8233032 ],\n       [1.97954219, 1.80819012],\n       [1.99263653, 1.79171854],\n       [2.00355121, 1.77480499],\n       [2.01324014, 1.75790752]])\n```\n:::\n:::\n\n\n::: {#46156726 .cell execution_count=11}\n``` {.python .cell-code}\nJlist\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```\narray([1.35302136, 0.39283316, 0.14356485, 0.07738847, 0.0584474 ,\n       0.05176925, 0.04834712, 0.04585734, 0.04369662, 0.04170475])\n```\n:::\n:::\n\n\n::: {#8c1aef45 .cell execution_count=12}\n``` {.python .cell-code}\ndJlist\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```\narray([[-2.31064488, -1.01302241],\n       [-1.19831188, -0.4617022 ],\n       [-0.63326872, -0.1834719 ],\n       [-0.34589833, -0.04374494],\n       [-0.19941743,  0.02575624],\n       [-0.12443229,  0.05966924],\n       [-0.08573741,  0.07556538],\n       [-0.06547171,  0.08235793],\n       [-0.05457338,  0.08456773],\n       [-0.04844465,  0.08448733]])\n```\n:::\n:::\n\n\nYou may compare the answer with the `PyTorch` implementation in @sec-gradientdescent_pytorch_example.\n\n### Mini-batch and optimizers {#sec-minibatch_numpy}\nReview the gradient formula @eq-gd_updating, the gradient is computed by looking at each given data point and putting the results together. Therefore it is possible to get the partial information of the gradient by just looking at part of the data. In other words, the updating process can be modify in the following way: divide the original dataset into several groups, run through each group to compute the gradient with the data in only one group and then update the parameters. In general there are three types:\n\n- There is only 1 group: we update the parameters only once when we finish looking at all data points. This is the way we mentioned previously. It is called **batch gradient descent**. \n- Every single point forms a group: we update the parameters eachtime we look at one data point. This method is called **stocastic gradient descent** (SGD). Since we compute the gradient with only one data point, it is expected that the direction is far from perfect, and the descent process is expected to be more \"random\". \n- Multiple groups of the same size are formed, with a reasonable group size and group number. This is called **mini-batch gradient descent**. It is the middle point between the above two methods. The **batch size**, which is the size of each group, is a very important hyperparameter for trainning.\n\n\n::: {.callout-note}\n# Epochs\nOne **epoch** is the process that you see each data point exactly once, no matter what the batch size is. \n:::\n\nUsually batch gd is expected to have a more smooth trajection but move slowly, while SGD is expected to move faster to the minimal point but may never really get to it since the trajection is too jumpy. Mini-batch is meant to strike a balanced point by finding a good batch size. In the example below, we show the mini-batch gd in the first 10 epochs.\n\n::: {#eadbbbae .cell execution_count=13}\n``` {.python .cell-code}\np = np.array([1.0, 1.5])\nlr = 0.2\nbatchsize = 32\n\nN = X_train.shape[0]\nindx = np.arange(N)\n\nnp.random.seed(RANDOMSEED)\nnp.random.shuffle(indx)\nbatches = []\n\nbatch_num = int(np.ceil(N / batchsize))\nfor i in range(batch_num):\n    last = np.minimum((i+1)*batchsize, N)\n    batches.append(indx[i*batchsize: last])\n\nplist = []\ndJlist = []\nfor epoch in range(10):\n    for i in range(batch_num):\n        dJ_i = dJ(p, X_train[batches[i]], y_train[batches[i]])\n        plist.append(p)\n        dJlist.append(dJ_i)\n        p = p - lr * dJ_i\nplist = np.array(plist)\ndJlist = np.array(dJlist)\nplist\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```\narray([[1.        , 1.5       ],\n       [1.46285746, 1.70106655],\n       [1.69070259, 1.79818536],\n       [1.83964871, 1.83505714],\n       [1.90613371, 1.84757611],\n       [1.9256405 , 1.82872528],\n       [1.97592205, 1.82673778],\n       [1.98940023, 1.8155614 ],\n       [1.9823805 , 1.78390392],\n       [2.01684837, 1.77729078],\n       [2.02288639, 1.76416895],\n       [2.01335611, 1.73316933],\n       [2.04322402, 1.72642582],\n       [2.04789825, 1.71414263],\n       [2.03895781, 1.68538956],\n       [2.06592161, 1.67907143],\n       [2.07006924, 1.66790451],\n       [2.06205273, 1.6414284 ],\n       [2.08652879, 1.63557239],\n       [2.09028969, 1.62547465],\n       [2.08317081, 1.60111433],\n       [2.10538986, 1.59569144],\n       [2.10880903, 1.58657975],\n       [2.10251958, 1.56416243],\n       [2.12267308, 1.55913779],\n       [2.12578073, 1.55093065],\n       [2.12025238, 1.53029466],\n       [2.13851315, 1.52563517],\n       [2.14133551, 1.51825718],\n       [2.13650484, 1.49925389]])\n```\n:::\n:::\n\n\n## Linear regression (`PyTorch`)\n\n### Construct `torch.Tensor`\nThere are multiple ways to construct a tensor. I just discuss those confusing ones. \n\n- `torch.Tensor` is the `PyTorch` tensor data structure. Itself serves as the constructor of the class, therefore you may use `torch.Tensor(data)` to construct a tensor. This is relative basic, and will have a default `float` type.\n- `torch.tensor` is the recommendated function to construct a tensor from data. It has two benefits over `torch.Tensor`: it will automatically induce the datatype from data instead of always using `float`; and it is easier to change datatype with the argument `dtype`.\n- `torch.as_tensor` is a function to construct a tensor from data. If the original data is numpy array, this tensor shares data with it. This means that if one is changed, the other is changed as well.\n\n::: {#3c056a84 .cell execution_count=14}\n``` {.python .cell-code}\nimport numpy as np\nimport torch\n\nexample = np.array([1, 2])\nexample_tensor0 = torch.Tensor(example)\nexample_tensor1 = torch.tensor(example)\nexample_tensor2 = torch.as_tensor(example)\n\nprint(f'Tensor: dtype: {example_tensor0.dtype}, tensor: dtype: {example_tensor1.dtype}')\n\nprint(f'tensor: {example_tensor1}, as_tensor: {example_tensor2}, original: {example}')\n\nexample[0] = 0\nprint(f'tensor: {example_tensor1}, as_tensor: {example_tensor2}, original: {example}')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTensor: dtype: torch.float32, tensor: dtype: torch.int32\ntensor: tensor([1, 2], dtype=torch.int32), as_tensor: tensor([1, 2], dtype=torch.int32), original: [1 2]\ntensor: tensor([1, 2], dtype=torch.int32), as_tensor: tensor([0, 2], dtype=torch.int32), original: [0 2]\n```\n:::\n:::\n\n\nIn general, it is recommended to use `torch.as_tensor` over `torch.tensor` (since for large data to create a view is much faster than to create a copy) and to use `torch.tensor` over `torch.Tensor` (due to the benefits mentioned above).\n\n\n::: {.callout-note}\n# datatype  \nThe datatype in `PyTorch` is very strict. Many functions can work with only some of the datatypes. In most cases `float` and `double` are used. Other types may or may not be supported by a specific function. \n\nHowever, there are a lot of ways to play with types. For example, you may use `torch.tensor([1], dtype=torch.double)` to directly construct a `double` tensor, or use `torch.tensor([1]).double()` to first construct an `int` tensor and then cast it into a `double` tensor.\n:::\n\n\n::: {.callout-note}\n# Scalar\nA tensor with only one element is still a tensor in `PyTorch`. To use it as a scalar, you need to use `itme()` method.\n\n::: {#5125919c .cell execution_count=15}\n``` {.python .cell-code}\na = torch.tensor(1)\na\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```\ntensor(1)\n```\n:::\n:::\n\n\n::: {#f486d70a .cell execution_count=16}\n``` {.python .cell-code}\na.item()\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n```\n1\n```\n:::\n:::\n\n\nNote that for `numpy`, before 2.0 version an array with one element is considered as scalar. However after 2.0, it behaves very similar to `PyTorch`.\n:::\n\nWe now construct a `PyTorch` tensor version of the dataset we used in previous sections. The `device` part will be introduced in the next section.\n\n::: {#8d6d390c .cell execution_count=17}\n``` {.python .cell-code}\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nimport torch\n\nRANDOMSEED = 42\nnp.random.seed(RANDOMSEED)\ndevice = 'cuda' if torch.cuda.is_available() else 'cpu'\n\nX = np.random.rand(100)\ny = 2.3 + 1.2 * X + np.random.randn(100) * 0.1\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=.15,\n                                                    random_state=RANDOMSEED)\nX_tensor_train = torch.as_tensor(X_train, device=device, dtype=torch.float)\ny_tensor_train = torch.as_tensor(y_train, device=device, dtype=torch.float)\n```\n:::\n\n\n### devices\nWe coulde use `torch.cuda.is_available()` to check whether we have GPU/CUDA supported devices. If the answer is no, we don't need to change any codes and everything works fine but slow.\n\nIf we have GPU/CUDA supported devices, we could send our tensors to them and do computations there. Google Colab is a good place to play with it if we don't have our own hardware.\n\nIn most cases we use `to(device)` method to send a tensor to a device. Sometimes some function has `device=device` argument to automatically construct tensors in a device. Note that if one needs to compute the gradient of a tensor and send the tensor to a device, we need to manually set `requires_grad_(True)`. \n\nHere are some examples, although they only makes sense in a GPU environment.\n\n::: {#447882ec .cell execution_count=18}\n``` {.python .cell-code}\ndevice = 'cuda' if torch.cuda.is_available() else 'cpu'\n\nt1 = torch.tensor(1, dtype=torch.float, device=device)\nt2 = torch.tensor(1, dtype=torch.float)\nprint(f't1: {t1.type()}, t2: {t2.type()}')\n```\n:::\n\n\nIf you can see `cuda` in the output of `type`, it is a GPU tensor. Otherwise it is a CPU tensor. We may use `to` to convert a CPU tensor to be a GPU tensor. If this tensor requires gradient, we should set it manually.\n\n::: {#9c6a3d5b .cell execution_count=19}\n``` {.python .cell-code}\nt3 = t2.to(device)\nt3 = t3.requires_grad_(True)\n```\n:::\n\n\nIt is usually recommended to write codes with `device` in mind like above, since the codes work for both CPU and GPU machines.\n\n### Gradient {#sec-gradientdescent_pytorch_example}\n`PyTorch` can use `autograd` to automatically compute the gradient of given formula. All computations are done within the context of tensors. The biggest difference between `PyTorch` tensor and `numpy` array is that `PyTorch` tensor carries gradient infomation on its own. \n\nThe step is very easy: first use `PyTorch` tensor to write a formula, enable gradients on correct tensors, and then use the `backward()` method.\n\n::: {#57a09ce4 .cell execution_count=20}\n``` {.python .cell-code}\nb = torch.tensor(1, dtype=torch.float, device=device, requires_grad=True)\nw = torch.tensor(1.5, dtype=torch.float, device=device, requires_grad=True)\n\nloss = ((y_tensor_train - b - w * X_tensor_train)**2).mean()\nloss.backward()\nprint(f'db: {b.grad}, dw: {w.grad}')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ndb: -2.31064510345459, dw: -1.0130224227905273\n```\n:::\n:::\n\n\nWe could manually compute the first few iterations and record the results. You may compare it with the `numpy` implementation in @sec-gradeientdescent_numpy_example. The answer is exactly the same.\n\n::: {#d9a89577 .cell execution_count=21}\n``` {.python .cell-code}\nb = torch.tensor(1, dtype=torch.float, device=device, requires_grad=True)\nw = torch.tensor(1.5, dtype=torch.float, device=device, requires_grad=True)\nlr = 0.2\ndJlist = []\nplist = []\nfor _ in range(10):\n    loss = ((y_tensor_train - b - w * X_tensor_train)**2).mean()\n    loss.backward()\n    with torch.no_grad():\n        b -= lr * b.grad\n        w -= lr * w.grad\n    b.grad.zero_()\n    w.grad.zero_()\n    dJlist.append([b.grad.item(), w.grad.item()])\n    plist.append([b.item(), w.item()])\n    \nplist\n```\n\n::: {.cell-output .cell-output-display execution_count=19}\n```\n[[1.46212899684906, 1.7026045322418213],\n [1.7017914056777954, 1.7949450016021729],\n [1.8284450769424438, 1.8316394090652466],\n [1.8976247310638428, 1.8403884172439575],\n [1.937508225440979, 1.8352371454238892],\n [1.9623947143554688, 1.8233033418655396],\n [1.9795421361923218, 1.8081902265548706],\n [1.9926364421844482, 1.791718602180481],\n [2.0035512447357178, 1.7748050689697266],\n [2.013240098953247, 1.7579076290130615]]\n```\n:::\n:::\n\n\n::: {#f43e67a2 .cell execution_count=22}\n``` {.python .cell-code}\ndJlist\n```\n\n::: {.cell-output .cell-output-display execution_count=20}\n```\n[[0.0, 0.0],\n [0.0, 0.0],\n [0.0, 0.0],\n [0.0, 0.0],\n [0.0, 0.0],\n [0.0, 0.0],\n [0.0, 0.0],\n [0.0, 0.0],\n [0.0, 0.0],\n [0.0, 0.0]]\n```\n:::\n:::\n\n\n::: {.callout-note}\nThe code has some tricky parts. The main issue is to let `PyTorch` know which gradient infomation should be kept, which should not. In this code, to make it run correctly, we need to pay attention to the following three things:\n\n- Before updating `b` and `w`, `with torch.no_grad()` should be used, to tell `PyTorch` don't compute gradient here.\n- When updating `b` and `w`, we should use the in-place syntax `b -= db` instead of `b = b - db`. Again, the reason is related to updating gradient: the out-of-place syntax `b = b - db` will lose the grad info.\n- After updating `b` and `w`, we need to zero out the grad info by applying `b.grad.zero_()` and `w.grad.zero_()`.\n:::\n\nWe will skip mini-batch gradient descent here, and leave it to the next section with a more systematic treatment.\n\n\n### Optimizers\n\nAfter we get the gradient, there are still many tricks to move one step further. We already talked about the learning rate before. It is not the only case. Another example is that sometimes we don't really want to move in the direction given by the gradient, but we want to modify it a little bit. All these tricks are combined together and are called optimizers.\n\nAn optimizer is a set of rules to update parameters after the gradient is computed. We already talked about `SGD` (stochastic gradient descent). Other common ones include `RMSprop` and `Adam`. In general, `Adam` is the generic best optimizer. If you don't know which optimizer to use, `Adam` is always the go-to choice.\n\nHere we rewrite our previous code by optimizers. We use `SGD` in this example. Again, we may compare the results to @sec-gradeientdescent_numpy_example and @sec-gradientdescent_pytorch_example.\n\n::: {#56aafad3 .cell execution_count=23}\n``` {.python .cell-code}\nfrom torch.optim import SGD\nimport torch\n\nlr = 0.2\nb = torch.tensor(1, dtype=torch.float, device=device, requires_grad=True)\nw = torch.tensor(1.5, dtype=torch.float, device=device, requires_grad=True)\n\noptimizer = SGD([b, w], lr=lr)\nplist = []\n\nfor epoch in range(10):\n    loss = ((y_tensor_train - b - w*X_tensor_train)**2).mean()\n    loss.backward()\n    optimizer.step()\n    optimizer.zero_grad()\n    plist.append([b.item(), w.item()])\nplist\n```\n\n::: {.cell-output .cell-output-display execution_count=21}\n```\n[[1.46212899684906, 1.7026045322418213],\n [1.7017914056777954, 1.7949450016021729],\n [1.8284450769424438, 1.8316394090652466],\n [1.8976247310638428, 1.8403884172439575],\n [1.937508225440979, 1.8352371454238892],\n [1.9623947143554688, 1.8233033418655396],\n [1.9795421361923218, 1.8081902265548706],\n [1.9926364421844482, 1.791718602180481],\n [2.0035512447357178, 1.7748050689697266],\n [2.013240098953247, 1.7579076290130615]]\n```\n:::\n:::\n\n\n## Rewrite in classes\n\n\n\n### Use class to describe the model\n\nWe now want to upgrade the code we wrote in previous sections in terms of classes, since it is a good way to wrap up our own code.\n\n::: {#d0717279 .cell execution_count=25}\n``` {.python .cell-code}\nimport torch\nimport torch.nn as nn\n\nclass LR(nn.Module):\n    def __init__(self, *args, **kwargs) -> None:\n        super().__init__(*args, **kwargs)\n\n        self.b = nn.Parameter(torch.tensor(1, requires_grad=True, dtype=torch.float))\n        self.w = nn.Parameter(torch.tensor(1.5, requires_grad=True, dtype=torch.float))\n\n    def forward(self, x):\n        return self.b + self.w * x\n\nRANDOMSEED = 42\ntorch.manual_seed(RANDOMSEED)\n\ndevice = 'cuda' if torch.cuda.is_available() else 'cpu'\nmodel = LR().to(device)\nmodel.state_dict()\n```\n\n::: {.cell-output .cell-output-display execution_count=23}\n```\nOrderedDict([('b', tensor(1.)), ('w', tensor(1.5000))])\n```\n:::\n:::\n\n\nWe could use `model.state_dict()` to look at the parameters of the model. Another way to see the parameters is to use `model.parameters()` method. The latter will return an iterator that help you go through all parameters.\n\n::: {#5eff6d7f .cell execution_count=26}\n``` {.python .cell-code}\nfor item in model.parameters():\n    print(item)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nParameter containing:\ntensor(1., requires_grad=True)\nParameter containing:\ntensor(1.5000, requires_grad=True)\n```\n:::\n:::\n\n\nNow we reproduce the training code for `LR` class.\n\n::: {#9de08143 .cell execution_count=27}\n``` {.python .cell-code}\nfrom torch.optim import SGD\n\ndef loss_fn(yhat, y):\n    return ((yhat-y)**2).mean()\n\nlr = 0.2\noptimizer = SGD(model.parameters(), lr=lr)\n\nepoch_num = 10\n\nfor epoch in range(epoch_num):\n    model.train()\n\n    yhat = model(X_tensor_train)\n    loss = loss_fn(yhat, y_tensor_train)\n    loss.backward()\n    optimizer.step()\n    optimizer.zero_grad()\n\nmodel.state_dict()\n```\n\n::: {.cell-output .cell-output-display execution_count=25}\n```\nOrderedDict([('b', tensor(2.0132)), ('w', tensor(1.7579))])\n```\n:::\n:::\n\n\n### Model standard models\n\nWe hand write our models and set parameters in our previous versions. `PyTorch` provides many standard modules that we can use directly. For example, the linear regression model can be found in `nn.modules` as `Linear`, while our loss function is the mean square differene function which is `MSELoss` from `nn`.\n\nNote that we apply `reshape` to the dataset in the following code. The reason is that the standard functions has strict requirements for the dimensions of the dataset. We don't follow the requirement when we prepare our dataset for simplicity. So we have to correct them at this point. It is better to follow the requirement since it is more general and more flexible in most cases.\n\n::: {#74c4e600 .cell execution_count=28}\n``` {.python .cell-code}\nfrom torch.optim import SGD\nfrom torch.nn.modules import Linear\nfrom torch.nn import MSELoss\n\nclass BetterLR(nn.Module):\n    def __init__(self, *args, **kwargs) -> None:\n        super().__init__(*args, **kwargs)\n\n        self.linear = Linear(in_features=1, out_features=1)\n        self.linear.bias = torch.nn.Parameter(torch.tensor([1.0], dtype=torch.float))\n        self.linear.weight = torch.nn.Parameter(torch.tensor([[1.5]], dtype=torch.float))\n\n    def forward(self, x):\n        return self.linear(x)\n\nlr = 0.2\n\ndevice = 'cuda' if torch.cuda.is_available() else 'cpu'\nmodel2 = BetterLR().to(device)\noptimizer2 = SGD(model2.parameters(), lr=lr)\n\nepoch_num = 10\n\nfor epoch in range(epoch_num):\n    model2.train()\n\n    yhat = model2(X_tensor_train.reshape(-1, 1))\n    loss2 = MSELoss(reduction='mean')(yhat, y_tensor_train.reshape(-1, 1))\n    loss2.backward()\n    optimizer2.step()\n    optimizer2.zero_grad()\n\nmodel2.state_dict()\n```\n\n::: {.cell-output .cell-output-display execution_count=26}\n```\nOrderedDict([('linear.weight', tensor([[1.7579]])),\n             ('linear.bias', tensor([2.0132]))])\n```\n:::\n:::\n\n\n::: {.callout-note}\n# Initialize the parameters\nIn all our examples we initialize the parameters to be $(1, 1.5)$ for the purpose of comparision. In most cases, we don't manually set the intial values, but use random numbers. In this case, we simply delete the manual codes.\n:::\n\n\n### Create templetes\n\n::: {#e5d8108d .cell execution_count=29}\n``` {.python .cell-code}\n# def model\n# def loss_fn\n# def optimizer\n\nepoch_num = 10\n\nfor epoch in range(epoch_num):\n    model.train()\n    yhat = model(X_train)\n    loss = loss_fn(yhat, y_train)\n    loss.backward()\n    optimizer.step()\n    optimizer.zero_grad()\n```\n:::\n\n\n### Dataloader {#sec-dataloader}\nUsually we use a class to provide data. The class is based on `Dataset` class, and need to implement the constructor, `__getitem__` method and `__len__` method. Here is an example.\n\n::: {#f3d1aff3 .cell execution_count=30}\n``` {.python .cell-code}\nfrom torch.utils.data import Dataset\n\nclass MyData(Dataset):\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __getitem__(self, index):\n        return (self.x[index], self.y[index])\n\n    def __len__(self):\n        return len(self.y)\n\ntrain_data = MyData(X_train, y_train)\ntrain_data[1]\n```\n\n::: {.cell-output .cell-output-display execution_count=27}\n```\n(0.7712703466859457, 3.1575219438652855)\n```\n:::\n:::\n\n\nThen we use `Dataloader` to feed the data into our model.\n\n::: {#834256ea .cell execution_count=31}\n``` {.python .cell-code}\nfrom torch.utils.data import DataLoader \n\nlr = 0.2\nepoch_num = 10\n\ndevice = 'cuda' if torch.cuda.is_available() else 'cpu'\nmodel = BetterLR().to(device)\noptimizer = SGD(model.parameters(), lr=lr)\n\ntrain_loader = DataLoader(dataset=train_data, batch_size=32, shuffle=True)\n\nfor epoch in range(epoch_num):\n    for X_batch, y_batch in train_loader:\n        yhat = model(X_batch.reshape(-1, 1).float())\n        loss = MSELoss(reduction='mean')(yhat, y_batch.reshape(-1, 1).float())\n        loss.backward()\n        optimizer.step()\n        optimizer.zero_grad()\n\nmodel.state_dict()\n```\n\n::: {.cell-output .cell-output-display execution_count=28}\n```\nOrderedDict([('linear.weight', tensor([[1.4938]])),\n             ('linear.bias', tensor([2.1368]))])\n```\n:::\n:::\n\n\nWhen applying mini-batch, usually we will shuffle the dataset. If we disable the shuffle here as well as the shuffle in `numpy` case, you will see that we get exactly the same answer.\n\n\n## Organize the outputs\n\n\n\n\n## Exercises\n\n\n\n::: {exr-}\nTry to reconstruct all the plots in Section @sec-linearregression_math.\n:::\n\n",
    "supporting": [
      "intro_files\\figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}