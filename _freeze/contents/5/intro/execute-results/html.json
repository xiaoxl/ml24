{
  "hash": "c807cfd03a2b83ff537dbe1fb745eb8a",
  "result": {
    "engine": "jupyter",
    "markdown": "# Logistic regression \n\nLogistic regression is very similar to linear regression, but applied to classification problems. In this chpater our idea is to treat it as the simplest example of a neural network instead of using other methods. The code we developped in the last chapter will be used extensively.\n\n<!-- \nConsider a set of training data $(x^{(1)}, y^{(1)}), (x^{(2)}, y^{(2)}), \\ldots$, where $x^{(i)}=(x^{(i)}_1, x^{(i)}_2, \\ldots, x^{(i)}_n)$ is a $n$-dim vector, and $y^{(i)}$ is a real number. We would like to use Linear regression to find the relation between $x$ and $y$. \n\nIn this case, we assume that $y$ is a linear function of $x$:\n\n$$\ny=\\theta_0 + \\sum_{j=1}^n\\theta_jx_j.\n$$\nThe purpose of Linear regression is to used the given training data to find out the best $\\Theta=(\\theta_0, \\theta_1, \\theta_2,\\ldots,\\theta_n)$. \n\nIf we set $\\hat{x}=(1, x_1, \\ldots,x_n)$, then the above formula can be reformulated by matrix multiplication.\n\n$$\ny=\\Theta \\hat{x}^T.\n$$\n\nWhen we want to deal with classification problem, we may still use this regression idea, but we have to do some modification.\n -->\n\n\n\n\n\n\n\n## Basic idea\n\nAssume that we have a binary classfification problem with $N$ features. Our model starts from the *logit* instead of the label $y$ itself.\n\n$$\nlogit(y)=\\theta_0+\\sum_{j=1}^N\\theta_jx_j.\n$$\n\nThe logit function is used to describe the logorithm of the binary odds. The odd ratio is the ratio between the probability of success and the probability of failure. Assume the probability of success is $p$. Then \n\n$$\noddratio(p)=\\frac{p}{1-p},\\quad logit(p)=z = \\log\\qty(\\frac{p}{1-p}).\n$$\nWe could solve the logit function, and get its inverse: the function is the *Sigmoid* function. Once we have the logit value, we could use it to get the probability. \n$$\np=\\sigma(z)=\\frac{1}{1+\\mathrm{e}^{-z}}.\n$$\n<!-- \nThe Logsitic regression is used to predict the probability of a data point belonging to a specific class. It is based on linear regression. The major difference is that logistic regreesion will have an activation function $\\sigma$ at the final stage to change the predicted values of the linear regression to the values that indicate classes. In the case of binary classification, the outcome of $\\sigma$ will be between $0$ and $1$, which is related to the two classes respectively. In this case, the number is interepted as the probability of the data to be in one of the specific class. -->\n\n\n\nTherefore the model for Logistic regression is as follows:\n\n$$\np=\\sigma(L(x))=\\sigma\\left(\\theta_0+\\sum_{j=1}^n\\theta_jx_j\\right)=\\sigma\\left(\\Theta \\hat{x}^T\\right).\n$$\n\n<!-- In most cases, this activation function is chosen to be the Sigmoid funciton. -->\n\n### Sigmoid function\n\nThe *Sigmoid* function is defined as follows:\n\n$$\n\\sigma(z)=\\frac{1}{1+\\mathrm{e}^{-z}}.\n$$\nThe graph of the function is shown below.\n\n::: {#4416dfff .cell execution_count=1}\n\n::: {.cell-output .cell-output-display}\n![](intro_files/figure-html/cell-2-output-1.png){width=571 height=411}\n:::\n:::\n\n\nThe main properties of $\\sigma$ are listed below as a Lemma.\n\n\n::: {#lem-sig}\n\nThe Sigmoid function $\\sigma(z)$ satisfies the following properties.\n\n1. $\\sigma(z)\\rightarrow \\infty$ when $z\\mapsto \\infty$.\n2. $\\sigma(z)\\rightarrow -\\infty$ when $z\\mapsto -\\infty$.\n3. $\\sigma(0)=0.5$.\n4. $\\sigma(z)$ is always increasing.\n5. $\\sigma'(z)=\\sigma(z)(1-\\sigma(z))$.\n\n:::\n\n\n\n::: {.solution}\nWe will only look at the last one.\n\n$$\n\\begin{split}\n\\sigma'(z)&=-\\frac{(1+\\mathrm e^{-z})'}{(1+\\mathrm e^{-z})^2}=\\frac{\\mathrm e^{-z}}{(1+\\mathrm e^{-z})^2}=\\frac{1}{1+\\mathrm e^{-z}}\\frac{\\mathrm e^{-z}}{1+\\mathrm e^{-z}}\\\\\n&=\\sigma(z)\\left(\\frac{1+\\mathrm e^{-z}}{1+\\mathrm e^{-z}}-\\frac{1}{1+\\mathrm e^{-z}}\\right)=\\sigma(z)(1-\\sigma(z)).\n\\end{split}\n$$\n:::\n\n\n\n### Gradient descent\n<!-- Assume that we would like to minimize a function $J(\\Theta)$, where this $\\Theta$ is an $N$-dim vector. Geometricly, we could treat $J$ as a height function, and it tells us the height of the mountain. Then to minimize $J$ is the same thing as to find the lowest point. One idea is to move towards the lowest point step by step. During each step we only need to lower our current height. After several steps we will be around the lowest point.\n\nThe geometric meaning of $\\nabla J$ is the direction that $J$ increase the most. Therefore the opposite direction is the one we want to move in. The formula to update $x$ is \n\n$$\n\\Theta_{\\text{new}} = \\Theta_{\\text{old}}-\\alpha \\nabla J(\\Theta_{\\text{old}}),\n$$\nwhere $\\alpha$ is called the *learning rate* which controls how fast you want to learn. Usually if $\\alpha$ is small, the learning tends to be slow and stble, and when $\\alpha$ is big, the learning tends to be fast and unstable. -->\n\n<!-- In machine learning, in most cases we would like to formulate the problem in terms of finding the lowest point of a *cost function* $J(\\Theta)$.  -->\n\nWe would like to use Gradient descent to sovle Logistic regression problems. For binary classification problem, the cost function is defined to be\n\n$$\nJ(\\Theta)=-\\frac1m\\sum_{i=1}^m\\left[y^{(i)}\\log(p^{(i)})+(1-y^{(i)})\\log(1-p^{(i)})\\right].\n$$\nHere $m$ is the number of data points, $y^{(i)}$ is the labelled result (which is either $0$ or $1$), $p^{(i)}$ is the predicted value (which is between $0$ and $1$). \n\n::: {.callout-note}\nThe algorithm gets its name since we are using the gradient to find a direction to lower our height. \n:::\n\n\n### The Formulas\n\n\n::: {#thm-reggrad}\nThe gradient of $J$ is computed by\n\n$$\n\\nabla J =\\frac1m(\\textbf{p}-\\textbf{y})^T\\hat{\\textbf{X}}.\n$$ {#eq-nablaJ}\n:::\n\n\n<details>\n<summary>Click for details.</summary>\n\n::: {.proof}\n\n\nThe formula is an application of the chain rule for the multivariable functions.\n\n$$\n\\begin{split}\n\\dfrac{\\partial p}{\\partial \\theta_k}&=\\dfrac{\\partial}{\\partial \\theta_k}\\sigma\\left(\\theta_0+\\sum_{j=1}^n\\theta_jx_j\\right)=\\dfrac{\\partial}{\\partial \\theta_k}\\sigma(L(\\Theta))\\\\\n&=\\sigma(L)(1-\\sigma(L))\\dfrac{\\partial}{\\partial \\theta_k}\\left(\\theta_0+\\sum_{j=1}^n\\theta_jx_j\\right)\\\\\n&=\\begin{cases}\np(1-p)&\\text{ if }k=0,\\\\\np(1-p)x_k&\\text{ otherwise}.\n\\end{cases}\n\\end{split}\n$$\nThen \n\n$$\n\\nabla p = \\left(\\frac{\\partial p}{\\partial\\theta_0},\\ldots,\\frac{\\partial p}{\\partial\\theta_n}\\right) = p(1-p)\\hat{x}.\n$$\n\nThen \n\n$$\n\\nabla \\log(p) = \\frac{\\nabla p}p =\\frac{p(1-p)\\hat{x}}{p}=(1-p)\\hat{x}.\n$$\n\n$$\n\\nabla \\log(1-p) = \\frac{-\\nabla p}{1-p} =-\\frac{p(1-p)\\hat{x}}{1-p}=-p\\hat{x}.\n$$\n\nThen \n\n$$\n\\begin{split}\n\\nabla J& = -\\frac1m\\sum_{i=1}^m\\left[y^{(i)}\\nabla \\log(p^{(i)})+(1-y^{(i)})\\nabla \\log(1-p^{(i)})\\right]\\\\\n&=-\\frac1m\\sum_{i=1}^m\\left[y^{(i)}(1-p^{(i)})\\hat{x}^{(i)}+(1-y^{(i)})(-p^{(i)}\\hat{x}^{(i)})\\right]\\\\\n&=-\\frac1m\\sum_{i=1}^m\\left[(y^{(i)}-p^{(i)})\\hat{x}^{(i)}\\right].\n\\end{split}\n$$\n\nWe write $\\hat{x}^{(i)}$ as row vectors, and stack all these row vectors vertically. What we get is a matrix $\\hat{\\textbf X}$ of the size $m\\times (1+n)$. We stack all $y^{(i)}$ (resp. $p^{(i)}$) vectically to get the $m$-dim column vector $\\textbf y$ (resp. $\\textbf p$). \n\nUsing this notation, the previous formula becomes\n\n\n$$\n\\nabla J =\\frac1m(\\textbf{p}-\\textbf{y})^T\\hat{\\textbf{X}}.\n$$\n\nAfter the gradient can be computed, we can start to use the gradient descent method. Note that, although $\\Theta$ are not explicitly presented in the formula of $\\nabla J$, this is used to modify $\\Theta$:\n\n$$\n\\Theta_{s+1} = \\Theta_s - \\alpha\\nabla J.\n$$\n\n:::\n</details>\n\n\n::: {.callout-note}\nIf you directly use library, like `sklearn` or `PyTorch`, they will handle the concrete computation of these gradients.\n:::\n\n\n\n## Regularization\n\n### Three types of errors\nEvery estimator has its advantages and drawbacks. Its generalization error can be decomposed in terms of bias, variance and noise. The **bias** of an estimator is its average error for different training sets. The **variance** of an estimator indicates how sensitive it is to varying training sets. Noise is a property of the data. \n\n\n### Underfit vs Overfit\n\nWhen fit a model to data, it is highly possible that the model is underfit or overfit. \n\nRoughly speaking, **underfit** means the model is not sufficient to fit the training samples, and **overfit** means that the models learns too many noise from the data. In many cases, high bias is related to underfit, and high variance is related to overfit.\n\nThe following example is from [the `sklearn` guide](https://scikit-learn.org/stable/auto_examples/model_selection/plot_underfitting_overfitting.html#sphx-glr-auto-examples-model-selection-plot-underfitting-overfitting-py). Although it is a polynomial regression example, it grasps the key idea of underfit and overfit.\n\n::: {#546f19af .cell .column-page execution_count=2}\n\n::: {.cell-output .cell-output-display}\n![](intro_files/figure-html/cell-3-output-1.png){width=1079 height=445}\n:::\n:::\n\n\n### Learning curves (accuracy vs training size)\n\nA learning curve shows the validation and training score of an estimator for varying a key hyperparameter. In most cases the key hyperparameter is the training size or the number of epochs. It is a tool to find out how much we benefit from altering the hyperparameter by training more data or training for more epochs, and whether the estimator suffers more from a variance error or a bias error. \n\n`sklearn` provides `sklearn.model_selection.learning_curve()` to generate the values that are required to plot such a learning curve. However this function is just related to the sample size. If we would like to talk about epochs, we need other packages.\n\nLet us first look at the learning curve about sample size. The official document page is [here](https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.learning_curve.html). The function takes input `estimator`, dataset `X`, `y`, and an arry-like argument `train_sizes`. The dataset `(X, y)` will be split into pieces using the cross-validation technique. The number of pieces is set by the argument `cv`. The default value is `cv=5`. For details about cross-validation please see @sec-cross-validation.\n\nThen the model is trained over a random sample of the training set, and evaluate the score over the test set. The size of the sample of the training set is set by the argument `train_sizes`. This argument is array-like. Therefore the process will be repeated several times, and we can see the impact of increasing the training size. \n\nThe output contains three pieces. The first is `train_sizes_abs` which is the number of elements in each training set. This output is mainly for reference. The difference between the output and the input `train_sizes` is that the input can be float which represents the percentagy. The output is always the exact number of elements.\n\nThe second output is `train_scores` and the third is `test_scores`, both of which are the scores we get from the training and testing process. Note that both are 2D `numpy` arrays, of the size `(number of different sizes, cv)`. Each row is a 1D `numpy` array representing the cross-validation scores, which is corresponding to a train size. If we want the mean as the cross-validation score, we could use `train_scores.mean(axis=1)`.\n\nAfter understanding the input and output, we could plot the learning curve. We still use the `horse colic` as the example. The details about the dataset can be found [here](https://xiaoxl.github.io/Datasets/contents/horse_colic.html).\n\n::: {#2292cddd .cell execution_count=3}\n``` {.python .cell-code}\nimport pandas as pd\nimport numpy as np\n\nurl = 'http://archive.ics.uci.edu/ml/machine-learning-databases/horse-colic/horse-colic.data'\ndf = pd.read_csv(url, delim_whitespace=True, header=None)\ndf = df.replace(\"?\", np.NaN)\n\ndf.fillna(0, inplace=True)\ndf.drop(columns=[2, 24, 25, 26, 27], inplace=True)\ndf[23].replace({1: 1, 2: 0}, inplace=True)\nX = df.iloc[:, :-1].to_numpy().astype(float)\ny = df[23].to_numpy().astype(int)\n\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.15, random_state=42)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nC:\\Users\\Xinli\\AppData\\Local\\Temp\\ipykernel_16596\\73942173.py:5: FutureWarning: The 'delim_whitespace' keyword in pd.read_csv is deprecated and will be removed in a future version. Use ``sep='\\s+'`` instead\n  df = pd.read_csv(url, delim_whitespace=True, header=None)\nC:\\Users\\Xinli\\AppData\\Local\\Temp\\ipykernel_16596\\73942173.py:10: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\nThe behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n\nFor example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n\n\n  df[23].replace({1: 1, 2: 0}, inplace=True)\n```\n:::\n:::\n\n\nWe use the model `LogisticRegression`. The following code plot the learning curve for this model.\n\n::: {#3f78d20c .cell execution_count=4}\n``` {.python .cell-code}\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.pipeline import Pipeline\n\nclf = LogisticRegression(max_iter=1000)\nsteps = [('scalar', MinMaxScaler()),\n         ('log', clf)]\npipe = Pipeline(steps=steps)\nfrom sklearn.model_selection import learning_curve\nimport numpy as np\ntrain_sizes, train_scores, test_scores = learning_curve(pipe, X_train, y_train,\n                                                        train_sizes=np.linspace(0.1, 1, 20))\n\nimport matplotlib.pyplot as plt\nplt.plot(train_sizes, train_scores.mean(axis=1), label='train')\nplt.plot(train_sizes, test_scores.mean(axis=1), label='test')\nplt.legend()\n```\n\n::: {.cell-output .cell-output-display}\n![](intro_files/figure-html/cell-5-output-1.png){width=579 height=411}\n:::\n:::\n\n\nThe learning curve is a primary tool for us to study the bias and variance. Usually\n\n- If the two training curve and the testing curve are very close to each other, this means that the variance is low. Otherwise the variance is high, and this means that the model probabily suffer from overfitting. \n- If the absolute training curve score is high, this means that the bias is low. Otherwise the bias is high, and this means that the model probabily suffer from underfitting.\n\nIn the above example, although regularization is applied by default, you may still notice some overfitting there.\n\n\n### Regularization\nRegularization is a technique to deal with overfitting. Here we only talk about the simplest method: ridge regression, also known as Tikhonov regularizaiton. Because of the formula given below, it is also called *$L_2$ regularization*. The idea is to add an additional term $\\dfrac{\\alpha}{2m}\\sum_{i=1}^m\\theta_i^2$ to the original cost function. When training with the new cost function, this additional term will force the parameters in the original term to be as small as possible. After finishing training, the additional term will be dropped, and we use the original cost function for validation and testing. Note that in the additional term $\\theta_0$ is not presented.\n\nThe hyperparameter $\\alpha$ is the *regularization strength*. If $\\alpha=0$, the new cost function becomes the original one; If $\\alpha$ is very large, the additional term dominates, and it will force all parameters to be almost $0$. In different context, the regularization strength is also given by $C=\\dfrac{1}{2\\alpha}$, called *inverse of regularization strength*.\n\n\n#### The math of regularization\n\n\n\n\n::: {#thm-ridgegrad}\nThe gradient of the ridge regression cost function is\n\n$$\n\\nabla J=\\frac1m(\\textbf{p}-\\textbf{y})^T\\hat{\\textbf{X}}+\\frac{\\alpha}{m}\\Theta.\n$$\n\nNote that $\\Theta$ doesn't contain $\\theta_0$, or you may treat $\\theta_0=0$.\n\n:::\n\nThe computation is straightforward.\n\n#### The code\n\nRegularization is directly provided by the logistic regression functions.\n\n- In `LogisticRegression`, the regularization is given by the argument `penalty` and `C`. `penalty` specifies the regularizaiton method. It is `l2` by default, which is the method above. `C` is the inverse of regularization strength, whose default value is `1`.\n- In `SGDClassifier`, the regularization is given by the argument `penalty` and `alpha`. `penalty` is the same as that in `LogisticRegression`, and `alpha` is the regularization strength, whose default value is `0.0001`.\n\nLet us see the above example.\n\n::: {#bde733e2 .cell execution_count=5}\n``` {.python .cell-code}\nclf = LogisticRegression(max_iter=1000, C=0.1)\nsteps = [('scalar', MinMaxScaler()),\n         ('log', clf)]\npipe = Pipeline(steps=steps)\nfrom sklearn.model_selection import learning_curve\nimport numpy as np\ntrain_sizes, train_scores, test_scores = learning_curve(pipe, X_train, y_train,\n                                                        train_sizes=np.linspace(0.1, 1, 20))\n\nimport matplotlib.pyplot as plt\nplt.plot(train_sizes, train_scores.mean(axis=1), label='train')\nplt.plot(train_sizes, test_scores.mean(axis=1), label='test')\nplt.legend()\n```\n\n::: {.cell-output .cell-output-display}\n![](intro_files/figure-html/cell-6-output-1.png){width=588 height=411}\n:::\n:::\n\n\nAfter we reduce `C` from `1` to `0.1`, the regularization strength is increased. Then you may find that the gap between the two curves are reduced. However the overall performace is also reduced, from 85%~90% in `C=1` case to around 80% in `C=0.1` case. This means that the model doesn't fit the data well as the previous one. Therefore this is a trade-off: decrease the variance but increase the bias.\n\n\n## Neural network implement of Logistic regression\nIn the previous sections, we use gradient descent to run the Logistic regression model. We mentioned some important concepts, like epochs, mini-batch, etc.. We are going to use `PyTorch` to implement it. We will reuse many codes we wrote in the previous chapter.\n\n### A simple example\n\nWe \n\n$$f(x)$$\n\n\n\n### Example\n\nWe still use the horse colic dataset as an example. We first prepare the dataset.\n\n::: {#148485df .cell execution_count=6}\n``` {.python .cell-code}\nimport pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\n\nurl = 'http://archive.ics.uci.edu/ml/machine-learning-databases/horse-colic/horse-colic.data'\ndf = pd.read_csv(url, sep='\\\\s+', header=None)\ndf = df.replace(\"?\", np.NaN)\n\ndf.fillna(0, inplace=True)\ndf = df.drop(columns=[2, 24, 25, 26, 27])\ndf[23] = df[23].replace({1: 1, 2: 0})\nX = df.iloc[:, :-1].to_numpy().astype(float)\ny = df[23].to_numpy().astype(int)\n\nSEED = 42\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.15, random_state=SEED)\n```\n:::\n\n\nWe need to perform normalization before throwing the data into the model. Here we use the `MinMaxScaler()` from `sklearn` package. \n\n::: {#680f89e9 .cell execution_count=7}\n``` {.python .cell-code}\nfrom sklearn.preprocessing import MinMaxScaler\nmms = MinMaxScaler()\nX_train = mms.fit_transform(X_train, y_train)\nX_test = mms.transform(X_test)\n```\n:::\n\n\nThen we write a `Dataset` class to build the dataset and create the dataloaders. Since the set is already split, we don't need to `random_split` here.\n\n::: {#dd49ef6b .cell execution_count=8}\n``` {.python .cell-code}\nimport torch\nfrom torch.utils.data import Dataset, DataLoader\n\nclass MyData(Dataset):\n    def __init__(self, X, y):\n        self.X = torch.tensor(X, dtype=float)\n        self.y = torch.tensor(y, dtype=float).reshape(-1, 1)\n\n    def __getitem__(self, index):\n        return (self.X[index], self.y[index])\n\n    def __len__(self):\n        return len(self.y)\n\n\ntrain_set = MyData(X_train, y_train)\nval_set = MyData(X_test, y_test)\n\ntrain_loader = DataLoader(train_set, batch_size=32, shuffle=True)\nval_loader = DataLoader(val_set, batch_size=32)\n```\n:::\n\n\n\n\nIn the following code, we first set up the original model.\n\n::: {#cebd94c1 .cell execution_count=10}\n``` {.python .cell-code}\nimport torch.nn as nn\nfrom torch.nn.modules import Linear\n\nclass LoR(nn.Module):\n    def __init__(self, *args, **kwargs) -> None:\n        super().__init__(*args, **kwargs)\n        self.linear = Linear(in_features=22, out_features=1, dtype=float)\n        self.activation = nn.Sigmoid()\n\n    def forward(self, X):\n        # pred = self.activation(self.linear(X))\n        pred = self.linear(X)\n        # return (pred >= 0).float()\n        return pred\n```\n:::\n\n\nThen we derive the base `ModelTemplate` class.\n\n::: {#66d358bf .cell execution_count=11}\n``` {.python .cell-code}\nclass LoRModel(ModelTemplate):\n    def __init__(self, model, loss_fn, optimizer):\n        super().__init__(model, loss_fn, optimizer)\n        self.stats['acc_train'] = []\n        self.stats['acc_val'] = []\n\n    def compute_acc(self, dataloader):\n        with torch.no_grad():\n            acc = []\n            for X_batch, y_batch in dataloader:\n                yhat = torch.sigmoid(self.model(X_batch))\n                y_pred = (yhat>=0.5).to(float)\n                acc.append((y_pred==y_batch).sum().item())\n            # print(acc_train)\n        return np.sum(acc)/len(dataloader.dataset)\n\n    def log_update(self, train_time, loss, val_time, val_loss, train_loader, val_loader):\n        super().log_update(train_time, loss, val_time, val_loss, train_loader, val_loader)\n        acc_train = self.compute_acc(train_loader)\n        acc_val = self.compute_acc(val_loader)\n        self.stats['acc_train'].append(acc_train)\n        self.stats['acc_val'].append(acc_val)\n\n\n        # p = self.model.state_dict()\n        # self.stats['acc'].append([p['linear.bias'].item(), p['linear.weight'].item()])\n\n    def log_output(self, verbose=0):\n        s = super().log_output(verbose=0, formatstr=':.6f')\n        s.append(f'acc_train: {self.stats['acc_train'][-1]:.6f}')\n        s.append(f'acc_val: {self.stats['acc_val'][-1]:.6f}')\n        # s.append(f'p: [{self.stats['p'][-1][0]:.6f}, {self.stats['p'][-1][1]:.6f}]')\n        if verbose == 1:\n            print(' '.join(s))\n        return s\n```\n:::\n\n\n::: {#20e6d874 .cell execution_count=12}\n``` {.python .cell-code}\nfrom torch.optim import SGD\nfrom torch.nn import BCEWithLogitsLoss, BCELoss\n\noriginal_model = LoR()\nmodel = LoRModel(model=original_model, loss_fn=BCEWithLogitsLoss(),\n                 optimizer=SGD(original_model.parameters(), lr = 0.1))\n\nmodel.train(train_loader, val_loader, epoch_num=100, verbose=1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nepoch 1 train_time: 0.016554 loss: 0.687305 val_time: 0.000998 val_loss: 0.629018 acc_train: 0.623529 acc_val: 0.688889\nepoch 2 train_time: 0.014543 loss: 0.647179 val_time: 0.002030 val_loss: 0.610829 acc_train: 0.623529 acc_val: 0.666667\nepoch 3 train_time: 0.009044 loss: 0.631053 val_time: 0.001007 val_loss: 0.590579 acc_train: 0.627451 acc_val: 0.666667\nepoch 4 train_time: 0.013516 loss: 0.619827 val_time: 0.002004 val_loss: 0.582125 acc_train: 0.631373 acc_val: 0.666667\nepoch 5 train_time: 0.009525 loss: 0.611581 val_time: 0.002002 val_loss: 0.573933 acc_train: 0.635294 acc_val: 0.688889\nepoch 6 train_time: 0.009542 loss: 0.603524 val_time: 0.002001 val_loss: 0.567759 acc_train: 0.627451 acc_val: 0.688889\nepoch 7 train_time: 0.014066 loss: 0.594559 val_time: 0.003011 val_loss: 0.565573 acc_train: 0.643137 acc_val: 0.688889\nepoch 8 train_time: 0.016076 loss: 0.586488 val_time: 0.003010 val_loss: 0.560729 acc_train: 0.650980 acc_val: 0.666667\nepoch 9 train_time: 0.011580 loss: 0.581166 val_time: 0.001000 val_loss: 0.559487 acc_train: 0.674510 acc_val: 0.644444\nepoch 10 train_time: 0.010719 loss: 0.574006 val_time: 0.001054 val_loss: 0.554144 acc_train: 0.674510 acc_val: 0.644444\nepoch 11 train_time: 0.014740 loss: 0.568107 val_time: 0.003658 val_loss: 0.547912 acc_train: 0.670588 acc_val: 0.666667\nepoch 12 train_time: 0.015177 loss: 0.562748 val_time: 0.001000 val_loss: 0.543812 acc_train: 0.686275 acc_val: 0.666667\nepoch 13 train_time: 0.014080 loss: 0.558267 val_time: 0.002007 val_loss: 0.543447 acc_train: 0.705882 acc_val: 0.666667\nepoch 14 train_time: 0.012550 loss: 0.553683 val_time: 0.002515 val_loss: 0.542561 acc_train: 0.733333 acc_val: 0.666667\nepoch 15 train_time: 0.012064 loss: 0.550834 val_time: 0.002008 val_loss: 0.538282 acc_train: 0.749020 acc_val: 0.666667\nepoch 16 train_time: 0.012560 loss: 0.544311 val_time: 0.001220 val_loss: 0.534921 acc_train: 0.752941 acc_val: 0.688889\nepoch 17 train_time: 0.013521 loss: 0.540649 val_time: 0.002523 val_loss: 0.531483 acc_train: 0.756863 acc_val: 0.688889\nepoch 18 train_time: 0.015265 loss: 0.536531 val_time: 0.004067 val_loss: 0.529776 acc_train: 0.764706 acc_val: 0.711111\nepoch 19 train_time: 0.012023 loss: 0.533492 val_time: 0.002005 val_loss: 0.528668 acc_train: 0.768627 acc_val: 0.711111\nepoch 20 train_time: 0.010550 loss: 0.528879 val_time: 0.002532 val_loss: 0.527157 acc_train: 0.768627 acc_val: 0.711111\nepoch 21 train_time: 0.014070 loss: 0.525856 val_time: 0.001014 val_loss: 0.524292 acc_train: 0.768627 acc_val: 0.711111\nepoch 22 train_time: 0.017544 loss: 0.522445 val_time: 0.003011 val_loss: 0.520279 acc_train: 0.768627 acc_val: 0.711111\nepoch 23 train_time: 0.014581 loss: 0.520419 val_time: 0.002542 val_loss: 0.524044 acc_train: 0.760784 acc_val: 0.688889\nepoch 24 train_time: 0.015014 loss: 0.517011 val_time: 0.001216 val_loss: 0.519522 acc_train: 0.764706 acc_val: 0.688889\nepoch 25 train_time: 0.014138 loss: 0.514204 val_time: 0.002186 val_loss: 0.516830 acc_train: 0.764706 acc_val: 0.688889\nepoch 26 train_time: 0.011526 loss: 0.512408 val_time: 0.001003 val_loss: 0.518149 acc_train: 0.764706 acc_val: 0.711111\nepoch 27 train_time: 0.012534 loss: 0.508721 val_time: 0.001002 val_loss: 0.517591 acc_train: 0.764706 acc_val: 0.711111\nepoch 28 train_time: 0.009021 loss: 0.507010 val_time: 0.001002 val_loss: 0.512259 acc_train: 0.764706 acc_val: 0.711111\nepoch 29 train_time: 0.013525 loss: 0.504229 val_time: 0.000994 val_loss: 0.514286 acc_train: 0.764706 acc_val: 0.711111\nepoch 30 train_time: 0.012513 loss: 0.502013 val_time: 0.001505 val_loss: 0.510456 acc_train: 0.764706 acc_val: 0.711111\nepoch 31 train_time: 0.009515 loss: 0.500548 val_time: 0.001505 val_loss: 0.512526 acc_train: 0.772549 acc_val: 0.733333\nepoch 32 train_time: 0.015541 loss: 0.497224 val_time: 0.002570 val_loss: 0.506306 acc_train: 0.764706 acc_val: 0.711111\nepoch 33 train_time: 0.015065 loss: 0.495740 val_time: 0.001996 val_loss: 0.508015 acc_train: 0.772549 acc_val: 0.733333\nepoch 34 train_time: 0.014525 loss: 0.492991 val_time: 0.000995 val_loss: 0.508081 acc_train: 0.788235 acc_val: 0.733333\nepoch 35 train_time: 0.013406 loss: 0.491803 val_time: 0.002012 val_loss: 0.506698 acc_train: 0.788235 acc_val: 0.733333\nepoch 36 train_time: 0.014590 loss: 0.489737 val_time: 0.002509 val_loss: 0.508183 acc_train: 0.788235 acc_val: 0.733333\nepoch 37 train_time: 0.015088 loss: 0.487203 val_time: 0.002008 val_loss: 0.505553 acc_train: 0.788235 acc_val: 0.733333\nepoch 38 train_time: 0.013531 loss: 0.485715 val_time: 0.001506 val_loss: 0.505410 acc_train: 0.792157 acc_val: 0.733333\nepoch 39 train_time: 0.013053 loss: 0.484001 val_time: 0.002999 val_loss: 0.503631 acc_train: 0.792157 acc_val: 0.733333\nepoch 40 train_time: 0.011433 loss: 0.482553 val_time: 0.002508 val_loss: 0.501427 acc_train: 0.792157 acc_val: 0.755556\nepoch 41 train_time: 0.015067 loss: 0.481098 val_time: 0.000997 val_loss: 0.503178 acc_train: 0.796078 acc_val: 0.733333\nepoch 42 train_time: 0.024775 loss: 0.479402 val_time: 0.003234 val_loss: 0.502023 acc_train: 0.796078 acc_val: 0.755556\nepoch 43 train_time: 0.010911 loss: 0.477439 val_time: 0.001537 val_loss: 0.504440 acc_train: 0.796078 acc_val: 0.733333\nepoch 44 train_time: 0.010969 loss: 0.475688 val_time: 0.001531 val_loss: 0.500365 acc_train: 0.800000 acc_val: 0.755556\nepoch 45 train_time: 0.013080 loss: 0.473399 val_time: 0.000995 val_loss: 0.497569 acc_train: 0.792157 acc_val: 0.755556\nepoch 46 train_time: 0.013170 loss: 0.472585 val_time: 0.002019 val_loss: 0.498848 acc_train: 0.800000 acc_val: 0.755556\nepoch 47 train_time: 0.012940 loss: 0.471106 val_time: 0.001000 val_loss: 0.498452 acc_train: 0.796078 acc_val: 0.755556\nepoch 48 train_time: 0.012061 loss: 0.470401 val_time: 0.000994 val_loss: 0.498351 acc_train: 0.796078 acc_val: 0.755556\nepoch 49 train_time: 0.016155 loss: 0.468439 val_time: 0.002000 val_loss: 0.496576 acc_train: 0.796078 acc_val: 0.755556\nepoch 50 train_time: 0.014244 loss: 0.467164 val_time: 0.002258 val_loss: 0.494957 acc_train: 0.796078 acc_val: 0.755556\nepoch 51 train_time: 0.016164 loss: 0.466241 val_time: 0.002624 val_loss: 0.495823 acc_train: 0.796078 acc_val: 0.777778\nepoch 52 train_time: 0.014609 loss: 0.465039 val_time: 0.001093 val_loss: 0.497141 acc_train: 0.800000 acc_val: 0.755556\nepoch 53 train_time: 0.008791 loss: 0.463880 val_time: 0.002007 val_loss: 0.494770 acc_train: 0.800000 acc_val: 0.777778\nepoch 54 train_time: 0.010544 loss: 0.461786 val_time: 0.000507 val_loss: 0.490373 acc_train: 0.796078 acc_val: 0.777778\nepoch 55 train_time: 0.008529 loss: 0.460941 val_time: 0.001994 val_loss: 0.489797 acc_train: 0.800000 acc_val: 0.777778\nepoch 56 train_time: 0.012516 loss: 0.459424 val_time: 0.002514 val_loss: 0.489345 acc_train: 0.800000 acc_val: 0.777778\nepoch 57 train_time: 0.013069 loss: 0.458503 val_time: 0.001001 val_loss: 0.490265 acc_train: 0.800000 acc_val: 0.777778\nepoch 58 train_time: 0.010536 loss: 0.457875 val_time: 0.003512 val_loss: 0.485759 acc_train: 0.803922 acc_val: 0.777778\nepoch 59 train_time: 0.015582 loss: 0.455383 val_time: 0.001000 val_loss: 0.487140 acc_train: 0.800000 acc_val: 0.777778\nepoch 60 train_time: 0.014898 loss: 0.455701 val_time: 0.001498 val_loss: 0.488668 acc_train: 0.803922 acc_val: 0.755556\nepoch 61 train_time: 0.018055 loss: 0.453859 val_time: 0.003236 val_loss: 0.486936 acc_train: 0.803922 acc_val: 0.755556\nepoch 62 train_time: 0.014062 loss: 0.453659 val_time: 0.001018 val_loss: 0.485058 acc_train: 0.800000 acc_val: 0.777778\nepoch 63 train_time: 0.011492 loss: 0.451791 val_time: 0.001516 val_loss: 0.484719 acc_train: 0.800000 acc_val: 0.777778\nepoch 64 train_time: 0.011550 loss: 0.452694 val_time: 0.004007 val_loss: 0.484204 acc_train: 0.800000 acc_val: 0.755556\nepoch 65 train_time: 0.017071 loss: 0.450128 val_time: 0.003002 val_loss: 0.485302 acc_train: 0.796078 acc_val: 0.755556\nepoch 66 train_time: 0.010518 loss: 0.449155 val_time: 0.001507 val_loss: 0.483107 acc_train: 0.800000 acc_val: 0.755556\nepoch 67 train_time: 0.012539 loss: 0.449069 val_time: 0.002517 val_loss: 0.488900 acc_train: 0.800000 acc_val: 0.755556\nepoch 68 train_time: 0.014073 loss: 0.448072 val_time: 0.001002 val_loss: 0.489223 acc_train: 0.792157 acc_val: 0.777778\nepoch 69 train_time: 0.016110 loss: 0.446037 val_time: 0.003023 val_loss: 0.484251 acc_train: 0.796078 acc_val: 0.755556\nepoch 70 train_time: 0.018088 loss: 0.446483 val_time: 0.001994 val_loss: 0.484048 acc_train: 0.796078 acc_val: 0.755556\nepoch 71 train_time: 0.011033 loss: 0.444053 val_time: 0.001506 val_loss: 0.482835 acc_train: 0.796078 acc_val: 0.755556\nepoch 72 train_time: 0.010533 loss: 0.443581 val_time: 0.002519 val_loss: 0.482815 acc_train: 0.796078 acc_val: 0.733333\nepoch 73 train_time: 0.006999 loss: 0.441916 val_time: 0.000506 val_loss: 0.481370 acc_train: 0.796078 acc_val: 0.755556\nepoch 74 train_time: 0.013047 loss: 0.442210 val_time: 0.002004 val_loss: 0.481685 acc_train: 0.796078 acc_val: 0.733333\nepoch 75 train_time: 0.014531 loss: 0.440478 val_time: 0.001000 val_loss: 0.482895 acc_train: 0.800000 acc_val: 0.777778\nepoch 76 train_time: 0.008520 loss: 0.439997 val_time: 0.000999 val_loss: 0.480762 acc_train: 0.803922 acc_val: 0.755556\nepoch 77 train_time: 0.013018 loss: 0.439290 val_time: 0.002527 val_loss: 0.483560 acc_train: 0.796078 acc_val: 0.777778\nepoch 78 train_time: 0.013515 loss: 0.439899 val_time: 0.002582 val_loss: 0.483708 acc_train: 0.800000 acc_val: 0.777778\nepoch 79 train_time: 0.014068 loss: 0.436585 val_time: 0.002032 val_loss: 0.480211 acc_train: 0.803922 acc_val: 0.777778\nepoch 80 train_time: 0.015594 loss: 0.436755 val_time: 0.002010 val_loss: 0.481489 acc_train: 0.800000 acc_val: 0.777778\nepoch 81 train_time: 0.013064 loss: 0.436268 val_time: 0.002665 val_loss: 0.478381 acc_train: 0.803922 acc_val: 0.755556\nepoch 82 train_time: 0.008817 loss: 0.435402 val_time: 0.001006 val_loss: 0.476859 acc_train: 0.803922 acc_val: 0.755556\nepoch 83 train_time: 0.010520 loss: 0.434043 val_time: 0.001505 val_loss: 0.479177 acc_train: 0.800000 acc_val: 0.777778\nepoch 84 train_time: 0.009958 loss: 0.433658 val_time: 0.002004 val_loss: 0.477113 acc_train: 0.803922 acc_val: 0.777778\nepoch 85 train_time: 0.010344 loss: 0.434383 val_time: 0.000998 val_loss: 0.479657 acc_train: 0.796078 acc_val: 0.777778\nepoch 86 train_time: 0.011517 loss: 0.431633 val_time: 0.001004 val_loss: 0.477295 acc_train: 0.800000 acc_val: 0.777778\nepoch 87 train_time: 0.014686 loss: 0.432182 val_time: 0.001000 val_loss: 0.480640 acc_train: 0.796078 acc_val: 0.777778\nepoch 88 train_time: 0.015550 loss: 0.430162 val_time: 0.003000 val_loss: 0.477199 acc_train: 0.800000 acc_val: 0.777778\nepoch 89 train_time: 0.012076 loss: 0.429550 val_time: 0.002013 val_loss: 0.475849 acc_train: 0.803922 acc_val: 0.777778\nepoch 90 train_time: 0.009029 loss: 0.428505 val_time: 0.002005 val_loss: 0.475251 acc_train: 0.803922 acc_val: 0.777778\nepoch 91 train_time: 0.014760 loss: 0.428774 val_time: 0.002523 val_loss: 0.475538 acc_train: 0.800000 acc_val: 0.777778\nepoch 92 train_time: 0.010943 loss: 0.427689 val_time: 0.002003 val_loss: 0.475123 acc_train: 0.803922 acc_val: 0.777778\nepoch 93 train_time: 0.014955 loss: 0.427007 val_time: 0.002509 val_loss: 0.474950 acc_train: 0.803922 acc_val: 0.777778\nepoch 94 train_time: 0.010377 loss: 0.428046 val_time: 0.002010 val_loss: 0.475000 acc_train: 0.803922 acc_val: 0.777778\nepoch 95 train_time: 0.017552 loss: 0.425579 val_time: 0.002528 val_loss: 0.473345 acc_train: 0.803922 acc_val: 0.777778\nepoch 96 train_time: 0.012069 loss: 0.425747 val_time: 0.002009 val_loss: 0.474508 acc_train: 0.803922 acc_val: 0.777778\nepoch 97 train_time: 0.011543 loss: 0.424612 val_time: 0.003005 val_loss: 0.471441 acc_train: 0.800000 acc_val: 0.777778\nepoch 98 train_time: 0.015598 loss: 0.423607 val_time: 0.003159 val_loss: 0.469371 acc_train: 0.807843 acc_val: 0.777778\nepoch 99 train_time: 0.012532 loss: 0.424526 val_time: 0.002598 val_loss: 0.469886 acc_train: 0.800000 acc_val: 0.777778\nepoch 100 train_time: 0.016588 loss: 0.422709 val_time: 0.002008 val_loss: 0.469303 acc_train: 0.800000 acc_val: 0.777778\n```\n:::\n:::\n\n\n## Pytorch crash course\n\n\n\n### Tensor\n\nThis is the basic data structure. It is very similar to `numpy.ndarray`, but with many more features. There are a few things that we need to mention at the beginning.\n\n1. A tensor with only one item is mathematically equal to a number. In Pytorch, you may use `.item()` to extract the number from a tensor with only one item.\n\n::: {#a4e112cc .cell execution_count=13}\n``` {.python .cell-code}\nimport torch\n\na = torch.tensor([1])\na\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```\ntensor([1])\n```\n:::\n:::\n\n\n::: {#da2f64c2 .cell execution_count=14}\n``` {.python .cell-code}\na.item()\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```\n1\n```\n:::\n:::\n\n\n2. It is type sensitive. Pytorch expect you to assign the exact data type to each tensor, and it won't automatically guess it in most cases. You may specify data type when you create a tensor.\n\n::: {#8ebc6cf5 .cell execution_count=15}\n``` {.python .cell-code}\nb = torch.tensor([1], dtype=torch.float64)\nb\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```\ntensor([1.], dtype=torch.float64)\n```\n:::\n:::\n\n\nIf you want to convert data type, you could use `.to()`.\n\n::: {#b53794d2 .cell execution_count=16}\n``` {.python .cell-code}\nb = torch.tensor([1], dtype=torch.float64)\nb = b.to(torch.int)\nb\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n```\ntensor([1], dtype=torch.int32)\n```\n:::\n:::\n\n\nTensor data structure has many other features that will be introduced later.\n\n\n### Gradient descent\n\nTo implement the gradient descent algorithm for the neural network, there would be a series of computations:\n\n1. From the input, feedforward the network to get the output `y_pred`.\n2. Based on the real output `y_true`, compute the loss function `loss = loss_fn(y_true, y_pred)`.\n3. Compute the gradient based on the information provided. For this step many data are needed. You may look up the gradient descent formula (backprop).\n4. Based on the gradient computed in Step 3, weights are updated, according to the optimizer we choose.\n\nIn Pytorch, the above steps are implemented as follows.\n\n1. You have to define a `model` function to indicate how to feedforward the network to get an output. Here for a lot of reasons, the typical way is to define a `model` class, which contains a `forward` method that can compute the output of the model. Let us consider the following example: the dataset is as follows:\n\n::: {#91845e46 .cell execution_count=17}\n``` {.python .cell-code}\nx = torch.tensor([[1, 2], [3, 4], [0, 1]], dtype=torch.float)\ny = torch.tensor([[3], [7], [1]], dtype=torch.float)\n```\n:::\n\n\nThe model is defined as follows.\n\n::: {#85496297 .cell execution_count=18}\n``` {.python .cell-code}\nimport torch.nn as nn\n\nclass MyModel(nn.Module):\n    def __init__(self):\n        super(MyModel, self).__init__()\n\n        self.fc = nn.Linear(in_features=2, out_features=1)\n    \n    def forward(self, x):\n        x = self.fc(x)\n        return x\n```\n:::\n\n\nIn this example, we define a 2-input linear regression model. Pytorch doesn't need the class to work. Actually the minimal working example of the above code is as follows. To put things into a class can make it easier in larger models. \n\n::: {#eeac42cd .cell execution_count=19}\n``` {.python .cell-code}\ndef model(x):\n    return nn.Linear(in_features=2, out_features=1)(x)\n```\n:::\n\n\nThe reason the model can be written in a very simple way is because the information about computing gradients is recorded in the parameter tensors, on the level of tensors, instead of on the level of the model class. Therefore it is important to get access to the parameters of the model. \n\n::: {#aa795cd3 .cell execution_count=20}\n``` {.python .cell-code}\nmodel = MyModel()\nlist(model.parameters())\n```\n\n::: {.cell-output .cell-output-display execution_count=20}\n```\n[Parameter containing:\n tensor([[-0.3573, -0.2246]], requires_grad=True),\n Parameter containing:\n tensor([-0.2558], requires_grad=True)]\n```\n:::\n:::\n\n\nNote that the parameters we get here is a iterator. So to look at it we need to convert it inot a list. In this example, there are two sets of tensors: the first is the coefficients, and the second is the bias term. This bias term can be turned on/off by setting the argument `bias=True` or `False` when using `nn.Linear()` to create fully connected layers. The default is `True`.\n\nTo evaluate the model, we just directly apply the model to the input tensor.\n\n::: {#1779e054 .cell execution_count=21}\n``` {.python .cell-code}\ny_pred = model(x)\ny_pred\n```\n\n::: {.cell-output .cell-output-display execution_count=21}\n```\ntensor([[-1.0623],\n        [-2.2262],\n        [-0.4804]], grad_fn=<AddmmBackward0>)\n```\n:::\n:::\n\n\nYou may use the coefficients provided above to validate the resutl.\n\nNote that, although we define the `.forward()` method, we don't use it explicitly. The reason is that `model(x)` will not only excute `.forward(x)` method, but many other operations, like recording many intermediate results that can be used for debugging, visualization and modifying gradients.\n\n\n2. We may define the loss function. We mannually define the MSE loss function.\n\n::: {#d987e196 .cell execution_count=22}\n``` {.python .cell-code}\ndef loss_fn(y_true, y_pred):\n    return ((y_true-y_pred)**2).mean()\n\nloss = loss_fn(y, y_pred)\nloss\n```\n\n::: {.cell-output .cell-output-display execution_count=22}\n```\ntensor(34.6054, grad_fn=<MeanBackward0>)\n```\n:::\n:::\n\n\n3. Now we need to do gradient descent. The manual way to `loss.backward()`. What it does is to \n\n::: {#7ac74c3c .cell execution_count=23}\n``` {.python .cell-code}\nprint(list(model.parameters()))\nprint(list(model.parameters())[0].grad)\nprint(list(model.parameters())[1].grad)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[Parameter containing:\ntensor([[-0.3573, -0.2246]], requires_grad=True), Parameter containing:\ntensor([-0.2558], requires_grad=True)]\nNone\nNone\n```\n:::\n:::\n\n\n::: {#264d4f4b .cell execution_count=24}\n``` {.python .cell-code}\nimport torch.optim as optim\noptimizer = optim.SGD(model.parameters(), lr=1e-2)\n```\n:::\n\n\n::: {#72110b10 .cell execution_count=25}\n``` {.python .cell-code}\nloss.backward()\noptimizer.step()\n\n```\n:::\n\n\n::: {#4b783e4f .cell execution_count=26}\n``` {.python .cell-code}\nfor i in range(100):\n    optimizer.zero_grad()\n    # print(optimizer.param_groups)\n\n    y_pred = model(x)\n    loss = loss_fn(y_pred, y)\n\n    # print(optimizer.param_groups)\n\n    loss.backward()\n    optimizer.step()\n\n    # print(optimizer.param_groups)\n\n    # print(list(model.parameters()))\n    # print(list(model.parameters())[0].grad)\n    # print(list(model.parameters())[1].grad)\n```\n:::\n\n\n4. Update the parameters by `optim` or manually done.\n\n### Mini-batch\n\n\n\n\n\n\n<!-- {{< include multi.qmd >}} -->\n\n\n\n\n### Codes\nWe will only talk about using packages. `sklearn` provides two methods to implement the Logistic regression. The API interface is very similar to other models. Later we will use `PyTorch` and our\n\nNote that Logistic regression is very sensitive to the scale of features. Therefore we need to normalize the features before throwing them into the model.\n\nLet's still take `iris` as an example.\n\n::: {#ba62229d .cell execution_count=27}\n``` {.python .cell-code}\nfrom sklearn import datasets\nfrom sklearn.model_selection import train_test_split\n\niris = datasets.load_iris()\nX = iris.data\ny = iris.target\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.15)\n```\n:::\n\n\nThe first method is `sklearn.linear_model.LogisticRegression`. \n\n::: {#f3c7f92c .cell execution_count=28}\n``` {.python .cell-code}\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import MinMaxScaler\n\nsteps = [('normalize', MinMaxScaler()),\n         ('log', LogisticRegression())]\n\nlog_reg = Pipeline(steps=steps)\nlog_reg.fit(X_train, y_train)\nlog_reg.score(X_test, y_test)\n```\n\n::: {.cell-output .cell-output-display execution_count=28}\n```\n0.9565217391304348\n```\n:::\n:::\n\n\nNote that this method has an option `solver` that will set the way to solve the Logistic regression problem, and there is no \"stochastic gradient descent\" provided. The default solver for this `LogsiticRegression` is `lbfgs` which will NOT be discussed in lectures.\n\nThe second method is `sklearn.linear_model.SGDClassifier`.\n\n::: {#6e4e9234 .cell execution_count=29}\n``` {.python .cell-code}\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import MinMaxScaler\n\nsteps = [('normalize', MinMaxScaler()),\n         ('log', SGDClassifier(loss='log_loss', max_iter=100))]\n\nsgd_clf = Pipeline(steps=steps)\nsgd_clf.fit(X_train, y_train)\nsgd_clf.score(X_test, y_test)\n```\n\n::: {.cell-output .cell-output-display execution_count=29}\n```\n0.9565217391304348\n```\n:::\n:::\n\n\nThis method is the one we discussed in lectures. The `log_loss` loss function is the binary entropy function we mentioned in lectures. If you change to other loss functions it will become other models.\n\nFrom the above example, you may notice that `SGDClassifier` doesn't perform as well as `LogisticRegression`. This is due to the algorithm. To make `SGDClassifier` better you need to tune the hyperparameters, like `max_iter`, `learning_rate`/`alpha`, `penalty`, etc..\n\n\n\n::: {.callout-note}\nThe argument `warm_start` is used to set whether you want to use your previous model. When set to `True`, it will reuse the solution of the previous call to fit as initialization, otherwise, just erase the previous solution. The default is `False`.  \n\nRepeatedly calling `fit` when `warm_start` is `True` can result in a different solution than when calling `fit` a single time because of the way the data is shuffled. \n:::\n\n\n::: {.callout-note}\n\nNote that for both methods, regularization (which will be discussed later) is applied by default.\n:::\n\n\n### Several important side topics\n\n#### Epochs\nWe use epoch to describe feeding data into the model. One *Epoch* is when an entire dataset is passed through the model once. When using gradient descent, we tend to run several epochs. The number of maximal epochs is one important hyperparameter of this model.\n\nThe general idea is that more epochs are better for the score of the model, but it will definitely be slower. In addition, sometimes due to many other factors, after a few epochs, the model becomes stall. To train for more epochs cannot improve the model. In this case you have to turn to other methods.\n\n\n#### Batch Gradient Descent vs SGD vs Minibatch\nRecall the Formula @eq-nablaJ: \n\n$$\n\\nabla J =\\frac1m(\\textbf{p}-\\textbf{y})^T\\hat{\\textbf{X}}.\n$$\nWe could rewrite this formula:\n\n$$\n\\nabla J =\\frac1m(\\textbf{p}-\\textbf{y})^T\\hat{\\textbf{X}}=\\frac1m\\sum_{i=1}^m\\left[(p^{(i)}-y^{(i)})\\hat{x}^{(i)}\\right].\n$$\nThis new formula can be understood in the following way: For every data point, we could get one gradient direction. Then $\\nabla J$ is the average of all gradient directions. So this algorithm can be expressed as that compute the gradient for every data points and then take the average, and finally update the parameters once. This algorithm is called *batch gradient descent*. \n\n\nFollowing the idea, there is another way to update the model. For every data point, we could compute one gradient direction, and we could use the gradient direction to update the parameters of the model. This algorithm is called *stochastic gradient descent*. \n\nThen there is an algrothm living in the middle, called *mini-batch gradient descent*. In this case, we will group the data set into a collection of subsets of a fiexed number of training examples. Each subset is called a *mini-batch*, and the fixed number of elements of each mini-batch is called the *batch size*. Using this method, we will just go through mini-batches one at a time, compute the average of the gradient for these data, and then update the parameters of the model after we finish one mini-batch. Assume that the total number of the dataset is `N`, the mini-batch size is `m`. Then there are `N/m` mini-batches, and during one epoch we will update the model `N/m` times.\n\n\nMini-batch size is one important hyperparameters of this model. Usually the larger the batch size is, the less variance the model has. Then it tends to behave more smoothly, but it will also be slower, and might be stuck to a local minimal. The smaller batch size is more chaotic. It might go faster, but it tends not to converge.\n\n\n\n\n\n## Exercises and Projects\n\n\n\n::: {#exr-}\nPlease hand write a report about the details of the math formulas for Logistic regression.\n:::\n\n\n\n\n::: {#exr-}\nCHOOSE ONE: Please use `sklearn` to apply the LogisticRegression to one of the following datasets. You may either use `LogisticRegression` or `SGDClassifier`.\n\n- the `iris` dataset.\n- the dating dataset.\n- the `titanic` dataset.\n\nPlease in addition answer the following questions.\n\n1. What is your accuracy score?\n2. How many epochs do you use?\n3. Plot the learning curve (accuracy vs training sizes).\n:::\n\n\n\n::: {#exr-}\n\nCHOOSE ONE: Please use `keras` to apply the LogisticRegression to one of the following datasets.\n\n- the `iris` dataset.\n- the dating dataset.\n- the `titanic` dataset.\n\nPlease in addition answer the following questions.\n\n1. What is your accuracy score?\n2. How many epochs do you use?\n3. What is the batch size do you use?\n4. Plot the learning curve (loss vs epochs, accuracy vs epochs).\n5. Analyze the bias / variance status.\n\n\n:::\n\n",
    "supporting": [
      "intro_files"
    ],
    "filters": [],
    "includes": {}
  }
}